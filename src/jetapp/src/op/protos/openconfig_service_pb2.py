# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: openconfig_service.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='openconfig_service.proto',
  package='openconfig',
  syntax='proto3',
  serialized_pb=_b('\n\x18openconfig_service.proto\x12\nopenconfig\"-\n\x17GetDataEncodingsRequest\x12\x12\n\nrequest_id\x18\x01 \x01(\x04\"\xb9\x01\n\x18GetDataEncodingsResponse\x12\x12\n\nrequest_id\x18\x01 \x01(\x04\x12\x39\n\x08\x65ncoding\x18\x02 \x03(\x0e\x32\'.openconfig.OpenConfigDataEncodingTypes\x12=\n\rresponse_code\x18\x03 \x01(\x0e\x32&.openconfig.OpenConfigRpcResponseTypes\x12\x0f\n\x07message\x18\x04 \x01(\t\"g\n\x16SetDataEncodingRequest\x12\x12\n\nrequest_id\x18\x01 \x01(\x04\x12\x39\n\x08\x65ncoding\x18\x02 \x01(\x0e\x32\'.openconfig.OpenConfigDataEncodingTypes\"}\n\x17SetDataEncodingResponse\x12\x12\n\nrequest_id\x18\x01 \x01(\x04\x12=\n\rresponse_code\x18\x02 \x01(\x0e\x32&.openconfig.OpenConfigRpcResponseTypes\x12\x0f\n\x07message\x18\x03 \x01(\t\"&\n\x10GetModelsRequest\x12\x12\n\nrequest_id\x18\x01 \x01(\x04\"9\n\x05Model\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x11\n\tnamespace\x18\x02 \x01(\t\x12\x0f\n\x07version\x18\x03 \x01(\t\"\x99\x01\n\x11GetModelsResponse\x12\x12\n\nrequest_id\x18\x01 \x01(\x04\x12 \n\x05model\x18\x02 \x03(\x0b\x32\x11.openconfig.Model\x12=\n\rresponse_code\x18\x03 \x01(\x0e\x32&.openconfig.OpenConfigRpcResponseTypes\x12\x0f\n\x07message\x18\x04 \x01(\t\"d\n\x0eGetRequestList\x12\x14\n\x0coperation_id\x18\x01 \x01(\t\x12.\n\toperation\x18\x02 \x01(\x0e\x32\x1b.openconfig.GetDataCommands\x12\x0c\n\x04path\x18\x03 \x01(\t\"\x8c\x01\n\nGetRequest\x12\x12\n\nrequest_id\x18\x01 \x01(\x04\x12\x39\n\x08\x65ncoding\x18\x02 \x01(\x0e\x32\'.openconfig.OpenConfigDataEncodingTypes\x12/\n\x0bget_request\x18\x03 \x03(\x0b\x32\x1a.openconfig.GetRequestList\"\xed\x01\n\x0bGetResponse\x12\x12\n\nrequest_id\x18\x01 \x01(\x04\x12\x36\n\x08response\x18\x02 \x03(\x0b\x32$.openconfig.GetResponse.ResponseList\x1a\x91\x01\n\x0cResponseList\x12\x14\n\x0coperation_id\x18\x01 \x01(\t\x12\x0c\n\x04path\x18\x02 \x01(\t\x12\r\n\x05value\x18\x03 \x01(\t\x12=\n\rresponse_code\x18\x04 \x01(\x0e\x32&.openconfig.OpenConfigRpcResponseTypes\x12\x0f\n\x07message\x18\x05 \x01(\t\"\xb2\x02\n\nSetRequest\x12\x12\n\nrequest_id\x18\x01 \x01(\x04\x12\x13\n\x0btransaction\x18\x02 \x01(\x08\x12\x39\n\x08\x65ncoding\x18\x03 \x01(\x0e\x32\'.openconfig.OpenConfigDataEncodingTypes\x12\x44\n\x10\x63onfig_operation\x18\x04 \x03(\x0b\x32*.openconfig.SetRequest.ConfigOperationList\x1az\n\x13\x43onfigOperationList\x12\x14\n\x0coperation_id\x18\x01 \x01(\t\x12\x30\n\toperation\x18\x02 \x01(\x0e\x32\x1d.openconfig.SetConfigCommands\x12\x0c\n\x04path\x18\x03 \x01(\t\x12\r\n\x05value\x18\x04 \x01(\t\"\xcf\x01\n\x0bSetResponse\x12\x12\n\nrequest_id\x18\x01 \x01(\x04\x12\x36\n\x08response\x18\x02 \x03(\x0b\x32$.openconfig.SetResponse.ResponseList\x1at\n\x0cResponseList\x12\x14\n\x0coperation_id\x18\x01 \x01(\t\x12=\n\rresponse_code\x18\x02 \x01(\x0e\x32&.openconfig.OpenConfigRpcResponseTypes\x12\x0f\n\x07message\x18\x03 \x01(\t*B\n\x1bOpenConfigDataEncodingTypes\x12\x10\n\x0c\x45NCODING_XML\x10\x00\x12\x11\n\rENCODING_JSON\x10\x01*M\n\x0fGetDataCommands\x12\x0b\n\x07GET_ALL\x10\x00\x12\x0e\n\nGET_CONFIG\x10\x01\x12\x0f\n\x0bGET_OPSTATE\x10\x02\x12\x0c\n\x08GET_OPER\x10\x03*M\n\x11SetConfigCommands\x12\x11\n\rUPDATE_CONFIG\x10\x00\x12\x12\n\x0eREPLACE_CONFIG\x10\x01\x12\x11\n\rDELETE_CONFIG\x10\x02*\xc1\x01\n\x1aOpenConfigRpcResponseTypes\x12\x06\n\x02OK\x10\x00\x12\x07\n\x03NOK\x10\x01\x12\x14\n\x10UNSUPPORTED_PATH\x10\x02\x12\x10\n\x0cINVALID_PATH\x10\x03\x12\x19\n\x15INVALID_CONFIGURATION\x10\x04\x12\x18\n\x14UNSUPPORTED_INTERVAL\x10\x05\x12\x1b\n\x17INVALID_SUBSCRIPTION_ID\x10\x06\x12\x18\n\x14UNSUPPORTED_ENCODING\x10\x07\x32\x91\x03\n\x10OpenconfigRpcApi\x12_\n\x10GetDataEncodings\x12#.openconfig.GetDataEncodingsRequest\x1a$.openconfig.GetDataEncodingsResponse\"\x00\x12\\\n\x0fSetDataEncoding\x12\".openconfig.SetDataEncodingRequest\x1a#.openconfig.SetDataEncodingResponse\"\x00\x12J\n\tGetModels\x12\x1c.openconfig.GetModelsRequest\x1a\x1d.openconfig.GetModelsResponse\"\x00\x12\x38\n\x03Get\x12\x16.openconfig.GetRequest\x1a\x17.openconfig.GetResponse\"\x00\x12\x38\n\x03Set\x12\x16.openconfig.SetRequest\x1a\x17.openconfig.SetResponse\"\x00\x62\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

_OPENCONFIGDATAENCODINGTYPES = _descriptor.EnumDescriptor(
  name='OpenConfigDataEncodingTypes',
  full_name='openconfig.OpenConfigDataEncodingTypes',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='ENCODING_XML', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ENCODING_JSON', index=1, number=1,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=1766,
  serialized_end=1832,
)
_sym_db.RegisterEnumDescriptor(_OPENCONFIGDATAENCODINGTYPES)

OpenConfigDataEncodingTypes = enum_type_wrapper.EnumTypeWrapper(_OPENCONFIGDATAENCODINGTYPES)
_GETDATACOMMANDS = _descriptor.EnumDescriptor(
  name='GetDataCommands',
  full_name='openconfig.GetDataCommands',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='GET_ALL', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='GET_CONFIG', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='GET_OPSTATE', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='GET_OPER', index=3, number=3,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=1834,
  serialized_end=1911,
)
_sym_db.RegisterEnumDescriptor(_GETDATACOMMANDS)

GetDataCommands = enum_type_wrapper.EnumTypeWrapper(_GETDATACOMMANDS)
_SETCONFIGCOMMANDS = _descriptor.EnumDescriptor(
  name='SetConfigCommands',
  full_name='openconfig.SetConfigCommands',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='UPDATE_CONFIG', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='REPLACE_CONFIG', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='DELETE_CONFIG', index=2, number=2,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=1913,
  serialized_end=1990,
)
_sym_db.RegisterEnumDescriptor(_SETCONFIGCOMMANDS)

SetConfigCommands = enum_type_wrapper.EnumTypeWrapper(_SETCONFIGCOMMANDS)
_OPENCONFIGRPCRESPONSETYPES = _descriptor.EnumDescriptor(
  name='OpenConfigRpcResponseTypes',
  full_name='openconfig.OpenConfigRpcResponseTypes',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='OK', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='NOK', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='UNSUPPORTED_PATH', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='INVALID_PATH', index=3, number=3,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='INVALID_CONFIGURATION', index=4, number=4,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='UNSUPPORTED_INTERVAL', index=5, number=5,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='INVALID_SUBSCRIPTION_ID', index=6, number=6,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='UNSUPPORTED_ENCODING', index=7, number=7,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=1993,
  serialized_end=2186,
)
_sym_db.RegisterEnumDescriptor(_OPENCONFIGRPCRESPONSETYPES)

OpenConfigRpcResponseTypes = enum_type_wrapper.EnumTypeWrapper(_OPENCONFIGRPCRESPONSETYPES)
ENCODING_XML = 0
ENCODING_JSON = 1
GET_ALL = 0
GET_CONFIG = 1
GET_OPSTATE = 2
GET_OPER = 3
UPDATE_CONFIG = 0
REPLACE_CONFIG = 1
DELETE_CONFIG = 2
OK = 0
NOK = 1
UNSUPPORTED_PATH = 2
INVALID_PATH = 3
INVALID_CONFIGURATION = 4
UNSUPPORTED_INTERVAL = 5
INVALID_SUBSCRIPTION_ID = 6
UNSUPPORTED_ENCODING = 7



_GETDATAENCODINGSREQUEST = _descriptor.Descriptor(
  name='GetDataEncodingsRequest',
  full_name='openconfig.GetDataEncodingsRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='request_id', full_name='openconfig.GetDataEncodingsRequest.request_id', index=0,
      number=1, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=40,
  serialized_end=85,
)


_GETDATAENCODINGSRESPONSE = _descriptor.Descriptor(
  name='GetDataEncodingsResponse',
  full_name='openconfig.GetDataEncodingsResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='request_id', full_name='openconfig.GetDataEncodingsResponse.request_id', index=0,
      number=1, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='encoding', full_name='openconfig.GetDataEncodingsResponse.encoding', index=1,
      number=2, type=14, cpp_type=8, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='response_code', full_name='openconfig.GetDataEncodingsResponse.response_code', index=2,
      number=3, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='message', full_name='openconfig.GetDataEncodingsResponse.message', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=88,
  serialized_end=273,
)


_SETDATAENCODINGREQUEST = _descriptor.Descriptor(
  name='SetDataEncodingRequest',
  full_name='openconfig.SetDataEncodingRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='request_id', full_name='openconfig.SetDataEncodingRequest.request_id', index=0,
      number=1, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='encoding', full_name='openconfig.SetDataEncodingRequest.encoding', index=1,
      number=2, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=275,
  serialized_end=378,
)


_SETDATAENCODINGRESPONSE = _descriptor.Descriptor(
  name='SetDataEncodingResponse',
  full_name='openconfig.SetDataEncodingResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='request_id', full_name='openconfig.SetDataEncodingResponse.request_id', index=0,
      number=1, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='response_code', full_name='openconfig.SetDataEncodingResponse.response_code', index=1,
      number=2, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='message', full_name='openconfig.SetDataEncodingResponse.message', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=380,
  serialized_end=505,
)


_GETMODELSREQUEST = _descriptor.Descriptor(
  name='GetModelsRequest',
  full_name='openconfig.GetModelsRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='request_id', full_name='openconfig.GetModelsRequest.request_id', index=0,
      number=1, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=507,
  serialized_end=545,
)


_MODEL = _descriptor.Descriptor(
  name='Model',
  full_name='openconfig.Model',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='openconfig.Model.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='namespace', full_name='openconfig.Model.namespace', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='version', full_name='openconfig.Model.version', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=547,
  serialized_end=604,
)


_GETMODELSRESPONSE = _descriptor.Descriptor(
  name='GetModelsResponse',
  full_name='openconfig.GetModelsResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='request_id', full_name='openconfig.GetModelsResponse.request_id', index=0,
      number=1, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='model', full_name='openconfig.GetModelsResponse.model', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='response_code', full_name='openconfig.GetModelsResponse.response_code', index=2,
      number=3, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='message', full_name='openconfig.GetModelsResponse.message', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=607,
  serialized_end=760,
)


_GETREQUESTLIST = _descriptor.Descriptor(
  name='GetRequestList',
  full_name='openconfig.GetRequestList',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='operation_id', full_name='openconfig.GetRequestList.operation_id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='operation', full_name='openconfig.GetRequestList.operation', index=1,
      number=2, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='path', full_name='openconfig.GetRequestList.path', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=762,
  serialized_end=862,
)


_GETREQUEST = _descriptor.Descriptor(
  name='GetRequest',
  full_name='openconfig.GetRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='request_id', full_name='openconfig.GetRequest.request_id', index=0,
      number=1, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='encoding', full_name='openconfig.GetRequest.encoding', index=1,
      number=2, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='get_request', full_name='openconfig.GetRequest.get_request', index=2,
      number=3, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=865,
  serialized_end=1005,
)


_GETRESPONSE_RESPONSELIST = _descriptor.Descriptor(
  name='ResponseList',
  full_name='openconfig.GetResponse.ResponseList',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='operation_id', full_name='openconfig.GetResponse.ResponseList.operation_id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='path', full_name='openconfig.GetResponse.ResponseList.path', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='value', full_name='openconfig.GetResponse.ResponseList.value', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='response_code', full_name='openconfig.GetResponse.ResponseList.response_code', index=3,
      number=4, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='message', full_name='openconfig.GetResponse.ResponseList.message', index=4,
      number=5, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1100,
  serialized_end=1245,
)

_GETRESPONSE = _descriptor.Descriptor(
  name='GetResponse',
  full_name='openconfig.GetResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='request_id', full_name='openconfig.GetResponse.request_id', index=0,
      number=1, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='response', full_name='openconfig.GetResponse.response', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_GETRESPONSE_RESPONSELIST, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1008,
  serialized_end=1245,
)


_SETREQUEST_CONFIGOPERATIONLIST = _descriptor.Descriptor(
  name='ConfigOperationList',
  full_name='openconfig.SetRequest.ConfigOperationList',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='operation_id', full_name='openconfig.SetRequest.ConfigOperationList.operation_id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='operation', full_name='openconfig.SetRequest.ConfigOperationList.operation', index=1,
      number=2, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='path', full_name='openconfig.SetRequest.ConfigOperationList.path', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='value', full_name='openconfig.SetRequest.ConfigOperationList.value', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1432,
  serialized_end=1554,
)

_SETREQUEST = _descriptor.Descriptor(
  name='SetRequest',
  full_name='openconfig.SetRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='request_id', full_name='openconfig.SetRequest.request_id', index=0,
      number=1, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='transaction', full_name='openconfig.SetRequest.transaction', index=1,
      number=2, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='encoding', full_name='openconfig.SetRequest.encoding', index=2,
      number=3, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='config_operation', full_name='openconfig.SetRequest.config_operation', index=3,
      number=4, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_SETREQUEST_CONFIGOPERATIONLIST, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1248,
  serialized_end=1554,
)


_SETRESPONSE_RESPONSELIST = _descriptor.Descriptor(
  name='ResponseList',
  full_name='openconfig.SetResponse.ResponseList',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='operation_id', full_name='openconfig.SetResponse.ResponseList.operation_id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='response_code', full_name='openconfig.SetResponse.ResponseList.response_code', index=1,
      number=2, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='message', full_name='openconfig.SetResponse.ResponseList.message', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1648,
  serialized_end=1764,
)

_SETRESPONSE = _descriptor.Descriptor(
  name='SetResponse',
  full_name='openconfig.SetResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='request_id', full_name='openconfig.SetResponse.request_id', index=0,
      number=1, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='response', full_name='openconfig.SetResponse.response', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_SETRESPONSE_RESPONSELIST, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1557,
  serialized_end=1764,
)

_GETDATAENCODINGSRESPONSE.fields_by_name['encoding'].enum_type = _OPENCONFIGDATAENCODINGTYPES
_GETDATAENCODINGSRESPONSE.fields_by_name['response_code'].enum_type = _OPENCONFIGRPCRESPONSETYPES
_SETDATAENCODINGREQUEST.fields_by_name['encoding'].enum_type = _OPENCONFIGDATAENCODINGTYPES
_SETDATAENCODINGRESPONSE.fields_by_name['response_code'].enum_type = _OPENCONFIGRPCRESPONSETYPES
_GETMODELSRESPONSE.fields_by_name['model'].message_type = _MODEL
_GETMODELSRESPONSE.fields_by_name['response_code'].enum_type = _OPENCONFIGRPCRESPONSETYPES
_GETREQUESTLIST.fields_by_name['operation'].enum_type = _GETDATACOMMANDS
_GETREQUEST.fields_by_name['encoding'].enum_type = _OPENCONFIGDATAENCODINGTYPES
_GETREQUEST.fields_by_name['get_request'].message_type = _GETREQUESTLIST
_GETRESPONSE_RESPONSELIST.fields_by_name['response_code'].enum_type = _OPENCONFIGRPCRESPONSETYPES
_GETRESPONSE_RESPONSELIST.containing_type = _GETRESPONSE
_GETRESPONSE.fields_by_name['response'].message_type = _GETRESPONSE_RESPONSELIST
_SETREQUEST_CONFIGOPERATIONLIST.fields_by_name['operation'].enum_type = _SETCONFIGCOMMANDS
_SETREQUEST_CONFIGOPERATIONLIST.containing_type = _SETREQUEST
_SETREQUEST.fields_by_name['encoding'].enum_type = _OPENCONFIGDATAENCODINGTYPES
_SETREQUEST.fields_by_name['config_operation'].message_type = _SETREQUEST_CONFIGOPERATIONLIST
_SETRESPONSE_RESPONSELIST.fields_by_name['response_code'].enum_type = _OPENCONFIGRPCRESPONSETYPES
_SETRESPONSE_RESPONSELIST.containing_type = _SETRESPONSE
_SETRESPONSE.fields_by_name['response'].message_type = _SETRESPONSE_RESPONSELIST
DESCRIPTOR.message_types_by_name['GetDataEncodingsRequest'] = _GETDATAENCODINGSREQUEST
DESCRIPTOR.message_types_by_name['GetDataEncodingsResponse'] = _GETDATAENCODINGSRESPONSE
DESCRIPTOR.message_types_by_name['SetDataEncodingRequest'] = _SETDATAENCODINGREQUEST
DESCRIPTOR.message_types_by_name['SetDataEncodingResponse'] = _SETDATAENCODINGRESPONSE
DESCRIPTOR.message_types_by_name['GetModelsRequest'] = _GETMODELSREQUEST
DESCRIPTOR.message_types_by_name['Model'] = _MODEL
DESCRIPTOR.message_types_by_name['GetModelsResponse'] = _GETMODELSRESPONSE
DESCRIPTOR.message_types_by_name['GetRequestList'] = _GETREQUESTLIST
DESCRIPTOR.message_types_by_name['GetRequest'] = _GETREQUEST
DESCRIPTOR.message_types_by_name['GetResponse'] = _GETRESPONSE
DESCRIPTOR.message_types_by_name['SetRequest'] = _SETREQUEST
DESCRIPTOR.message_types_by_name['SetResponse'] = _SETRESPONSE
DESCRIPTOR.enum_types_by_name['OpenConfigDataEncodingTypes'] = _OPENCONFIGDATAENCODINGTYPES
DESCRIPTOR.enum_types_by_name['GetDataCommands'] = _GETDATACOMMANDS
DESCRIPTOR.enum_types_by_name['SetConfigCommands'] = _SETCONFIGCOMMANDS
DESCRIPTOR.enum_types_by_name['OpenConfigRpcResponseTypes'] = _OPENCONFIGRPCRESPONSETYPES

GetDataEncodingsRequest = _reflection.GeneratedProtocolMessageType('GetDataEncodingsRequest', (_message.Message,), dict(
  DESCRIPTOR = _GETDATAENCODINGSREQUEST,
  __module__ = 'openconfig_service_pb2'
  # @@protoc_insertion_point(class_scope:openconfig.GetDataEncodingsRequest)
  ))
_sym_db.RegisterMessage(GetDataEncodingsRequest)

GetDataEncodingsResponse = _reflection.GeneratedProtocolMessageType('GetDataEncodingsResponse', (_message.Message,), dict(
  DESCRIPTOR = _GETDATAENCODINGSRESPONSE,
  __module__ = 'openconfig_service_pb2'
  # @@protoc_insertion_point(class_scope:openconfig.GetDataEncodingsResponse)
  ))
_sym_db.RegisterMessage(GetDataEncodingsResponse)

SetDataEncodingRequest = _reflection.GeneratedProtocolMessageType('SetDataEncodingRequest', (_message.Message,), dict(
  DESCRIPTOR = _SETDATAENCODINGREQUEST,
  __module__ = 'openconfig_service_pb2'
  # @@protoc_insertion_point(class_scope:openconfig.SetDataEncodingRequest)
  ))
_sym_db.RegisterMessage(SetDataEncodingRequest)

SetDataEncodingResponse = _reflection.GeneratedProtocolMessageType('SetDataEncodingResponse', (_message.Message,), dict(
  DESCRIPTOR = _SETDATAENCODINGRESPONSE,
  __module__ = 'openconfig_service_pb2'
  # @@protoc_insertion_point(class_scope:openconfig.SetDataEncodingResponse)
  ))
_sym_db.RegisterMessage(SetDataEncodingResponse)

GetModelsRequest = _reflection.GeneratedProtocolMessageType('GetModelsRequest', (_message.Message,), dict(
  DESCRIPTOR = _GETMODELSREQUEST,
  __module__ = 'openconfig_service_pb2'
  # @@protoc_insertion_point(class_scope:openconfig.GetModelsRequest)
  ))
_sym_db.RegisterMessage(GetModelsRequest)

Model = _reflection.GeneratedProtocolMessageType('Model', (_message.Message,), dict(
  DESCRIPTOR = _MODEL,
  __module__ = 'openconfig_service_pb2'
  # @@protoc_insertion_point(class_scope:openconfig.Model)
  ))
_sym_db.RegisterMessage(Model)

GetModelsResponse = _reflection.GeneratedProtocolMessageType('GetModelsResponse', (_message.Message,), dict(
  DESCRIPTOR = _GETMODELSRESPONSE,
  __module__ = 'openconfig_service_pb2'
  # @@protoc_insertion_point(class_scope:openconfig.GetModelsResponse)
  ))
_sym_db.RegisterMessage(GetModelsResponse)

GetRequestList = _reflection.GeneratedProtocolMessageType('GetRequestList', (_message.Message,), dict(
  DESCRIPTOR = _GETREQUESTLIST,
  __module__ = 'openconfig_service_pb2'
  # @@protoc_insertion_point(class_scope:openconfig.GetRequestList)
  ))
_sym_db.RegisterMessage(GetRequestList)

GetRequest = _reflection.GeneratedProtocolMessageType('GetRequest', (_message.Message,), dict(
  DESCRIPTOR = _GETREQUEST,
  __module__ = 'openconfig_service_pb2'
  # @@protoc_insertion_point(class_scope:openconfig.GetRequest)
  ))
_sym_db.RegisterMessage(GetRequest)

GetResponse = _reflection.GeneratedProtocolMessageType('GetResponse', (_message.Message,), dict(

  ResponseList = _reflection.GeneratedProtocolMessageType('ResponseList', (_message.Message,), dict(
    DESCRIPTOR = _GETRESPONSE_RESPONSELIST,
    __module__ = 'openconfig_service_pb2'
    # @@protoc_insertion_point(class_scope:openconfig.GetResponse.ResponseList)
    ))
  ,
  DESCRIPTOR = _GETRESPONSE,
  __module__ = 'openconfig_service_pb2'
  # @@protoc_insertion_point(class_scope:openconfig.GetResponse)
  ))
_sym_db.RegisterMessage(GetResponse)
_sym_db.RegisterMessage(GetResponse.ResponseList)

SetRequest = _reflection.GeneratedProtocolMessageType('SetRequest', (_message.Message,), dict(

  ConfigOperationList = _reflection.GeneratedProtocolMessageType('ConfigOperationList', (_message.Message,), dict(
    DESCRIPTOR = _SETREQUEST_CONFIGOPERATIONLIST,
    __module__ = 'openconfig_service_pb2'
    # @@protoc_insertion_point(class_scope:openconfig.SetRequest.ConfigOperationList)
    ))
  ,
  DESCRIPTOR = _SETREQUEST,
  __module__ = 'openconfig_service_pb2'
  # @@protoc_insertion_point(class_scope:openconfig.SetRequest)
  ))
_sym_db.RegisterMessage(SetRequest)
_sym_db.RegisterMessage(SetRequest.ConfigOperationList)

SetResponse = _reflection.GeneratedProtocolMessageType('SetResponse', (_message.Message,), dict(

  ResponseList = _reflection.GeneratedProtocolMessageType('ResponseList', (_message.Message,), dict(
    DESCRIPTOR = _SETRESPONSE_RESPONSELIST,
    __module__ = 'openconfig_service_pb2'
    # @@protoc_insertion_point(class_scope:openconfig.SetResponse.ResponseList)
    ))
  ,
  DESCRIPTOR = _SETRESPONSE,
  __module__ = 'openconfig_service_pb2'
  # @@protoc_insertion_point(class_scope:openconfig.SetResponse)
  ))
_sym_db.RegisterMessage(SetResponse)
_sym_db.RegisterMessage(SetResponse.ResponseList)


try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces


  class OpenconfigRpcApiStub(object):
    """
    MGD Service Definitions
    """

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.GetDataEncodings = channel.unary_unary(
          '/openconfig.OpenconfigRpcApi/GetDataEncodings',
          request_serializer=GetDataEncodingsRequest.SerializeToString,
          response_deserializer=GetDataEncodingsResponse.FromString,
          )
      self.SetDataEncoding = channel.unary_unary(
          '/openconfig.OpenconfigRpcApi/SetDataEncoding',
          request_serializer=SetDataEncodingRequest.SerializeToString,
          response_deserializer=SetDataEncodingResponse.FromString,
          )
      self.GetModels = channel.unary_unary(
          '/openconfig.OpenconfigRpcApi/GetModels',
          request_serializer=GetModelsRequest.SerializeToString,
          response_deserializer=GetModelsResponse.FromString,
          )
      self.Get = channel.unary_unary(
          '/openconfig.OpenconfigRpcApi/Get',
          request_serializer=GetRequest.SerializeToString,
          response_deserializer=GetResponse.FromString,
          )
      self.Set = channel.unary_unary(
          '/openconfig.OpenconfigRpcApi/Set',
          request_serializer=SetRequest.SerializeToString,
          response_deserializer=SetResponse.FromString,
          )


  class OpenconfigRpcApiServicer(object):
    """
    MGD Service Definitions
    """

    def GetDataEncodings(self, request, context):
      """
      Return the set of data encodings supported by the device for
      configuration and telemetry data modeled in YANG
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def SetDataEncoding(self, request, context):
      """
      Select and set one of the data encodings returned by
      getDataEncodings.  This RPC sets the global encoding
      serialization for all data exchanged with the target
      device. The global data encoding may be optionally overriden
      by setting the encoding for an individual RPC if supported by the target
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetModels(self, request, context):
      """
      Returns a repeated structure of supported data models
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def Get(self, request, context):
      """
      Requests data from the network device.  The get RPC
      request should include a subcommand to indicate the type of
      data desired by the requestor.  Supported types of data
      include: configuration data (config: true nodes in the schema)
      operational state data (config: false nodes)
      derived operational state only (config: false nodes that
      represent derived operational state, exluding config: false
      nodes that represent applied configuration.
      all data (config: true and config: false nodes)
      A get RPC can contain multiple requests for data.  Each
      request includes a path specifying a subtree in the data
      model, and a command to indicate which type of data should be returned
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def Set(self, request, context):
      """
      Modify configuration on the target device. The set
      RPC accepts a combination of commands, each with an
      associated path specification to indicate which data should be modified.
      The commands in a set request should be fully validated and accepted by
      the device before a response is returned.  The
      application of the configuration commands may or may not be
      complete when the command returns.  The NMS is expected to be
      able to track the application of the configuration using the
      operational state data in the telemetry stream, or by
      retrieving the state data using an RPC
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_OpenconfigRpcApiServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'GetDataEncodings': grpc.unary_unary_rpc_method_handler(
            servicer.GetDataEncodings,
            request_deserializer=GetDataEncodingsRequest.FromString,
            response_serializer=GetDataEncodingsResponse.SerializeToString,
        ),
        'SetDataEncoding': grpc.unary_unary_rpc_method_handler(
            servicer.SetDataEncoding,
            request_deserializer=SetDataEncodingRequest.FromString,
            response_serializer=SetDataEncodingResponse.SerializeToString,
        ),
        'GetModels': grpc.unary_unary_rpc_method_handler(
            servicer.GetModels,
            request_deserializer=GetModelsRequest.FromString,
            response_serializer=GetModelsResponse.SerializeToString,
        ),
        'Get': grpc.unary_unary_rpc_method_handler(
            servicer.Get,
            request_deserializer=GetRequest.FromString,
            response_serializer=GetResponse.SerializeToString,
        ),
        'Set': grpc.unary_unary_rpc_method_handler(
            servicer.Set,
            request_deserializer=SetRequest.FromString,
            response_serializer=SetResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'openconfig.OpenconfigRpcApi', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaOpenconfigRpcApiServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """
    MGD Service Definitions
    """
    def GetDataEncodings(self, request, context):
      """
      Return the set of data encodings supported by the device for
      configuration and telemetry data modeled in YANG
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def SetDataEncoding(self, request, context):
      """
      Select and set one of the data encodings returned by
      getDataEncodings.  This RPC sets the global encoding
      serialization for all data exchanged with the target
      device. The global data encoding may be optionally overriden
      by setting the encoding for an individual RPC if supported by the target
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetModels(self, request, context):
      """
      Returns a repeated structure of supported data models
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def Get(self, request, context):
      """
      Requests data from the network device.  The get RPC
      request should include a subcommand to indicate the type of
      data desired by the requestor.  Supported types of data
      include: configuration data (config: true nodes in the schema)
      operational state data (config: false nodes)
      derived operational state only (config: false nodes that
      represent derived operational state, exluding config: false
      nodes that represent applied configuration.
      all data (config: true and config: false nodes)
      A get RPC can contain multiple requests for data.  Each
      request includes a path specifying a subtree in the data
      model, and a command to indicate which type of data should be returned
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def Set(self, request, context):
      """
      Modify configuration on the target device. The set
      RPC accepts a combination of commands, each with an
      associated path specification to indicate which data should be modified.
      The commands in a set request should be fully validated and accepted by
      the device before a response is returned.  The
      application of the configuration commands may or may not be
      complete when the command returns.  The NMS is expected to be
      able to track the application of the configuration using the
      operational state data in the telemetry stream, or by
      retrieving the state data using an RPC
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaOpenconfigRpcApiStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """
    MGD Service Definitions
    """
    def GetDataEncodings(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """
      Return the set of data encodings supported by the device for
      configuration and telemetry data modeled in YANG
      """
      raise NotImplementedError()
    GetDataEncodings.future = None
    def SetDataEncoding(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """
      Select and set one of the data encodings returned by
      getDataEncodings.  This RPC sets the global encoding
      serialization for all data exchanged with the target
      device. The global data encoding may be optionally overriden
      by setting the encoding for an individual RPC if supported by the target
      """
      raise NotImplementedError()
    SetDataEncoding.future = None
    def GetModels(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """
      Returns a repeated structure of supported data models
      """
      raise NotImplementedError()
    GetModels.future = None
    def Get(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """
      Requests data from the network device.  The get RPC
      request should include a subcommand to indicate the type of
      data desired by the requestor.  Supported types of data
      include: configuration data (config: true nodes in the schema)
      operational state data (config: false nodes)
      derived operational state only (config: false nodes that
      represent derived operational state, exluding config: false
      nodes that represent applied configuration.
      all data (config: true and config: false nodes)
      A get RPC can contain multiple requests for data.  Each
      request includes a path specifying a subtree in the data
      model, and a command to indicate which type of data should be returned
      """
      raise NotImplementedError()
    Get.future = None
    def Set(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """
      Modify configuration on the target device. The set
      RPC accepts a combination of commands, each with an
      associated path specification to indicate which data should be modified.
      The commands in a set request should be fully validated and accepted by
      the device before a response is returned.  The
      application of the configuration commands may or may not be
      complete when the command returns.  The NMS is expected to be
      able to track the application of the configuration using the
      operational state data in the telemetry stream, or by
      retrieving the state data using an RPC
      """
      raise NotImplementedError()
    Set.future = None


  def beta_create_OpenconfigRpcApi_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('openconfig.OpenconfigRpcApi', 'Get'): GetRequest.FromString,
      ('openconfig.OpenconfigRpcApi', 'GetDataEncodings'): GetDataEncodingsRequest.FromString,
      ('openconfig.OpenconfigRpcApi', 'GetModels'): GetModelsRequest.FromString,
      ('openconfig.OpenconfigRpcApi', 'Set'): SetRequest.FromString,
      ('openconfig.OpenconfigRpcApi', 'SetDataEncoding'): SetDataEncodingRequest.FromString,
    }
    response_serializers = {
      ('openconfig.OpenconfigRpcApi', 'Get'): GetResponse.SerializeToString,
      ('openconfig.OpenconfigRpcApi', 'GetDataEncodings'): GetDataEncodingsResponse.SerializeToString,
      ('openconfig.OpenconfigRpcApi', 'GetModels'): GetModelsResponse.SerializeToString,
      ('openconfig.OpenconfigRpcApi', 'Set'): SetResponse.SerializeToString,
      ('openconfig.OpenconfigRpcApi', 'SetDataEncoding'): SetDataEncodingResponse.SerializeToString,
    }
    method_implementations = {
      ('openconfig.OpenconfigRpcApi', 'Get'): face_utilities.unary_unary_inline(servicer.Get),
      ('openconfig.OpenconfigRpcApi', 'GetDataEncodings'): face_utilities.unary_unary_inline(servicer.GetDataEncodings),
      ('openconfig.OpenconfigRpcApi', 'GetModels'): face_utilities.unary_unary_inline(servicer.GetModels),
      ('openconfig.OpenconfigRpcApi', 'Set'): face_utilities.unary_unary_inline(servicer.Set),
      ('openconfig.OpenconfigRpcApi', 'SetDataEncoding'): face_utilities.unary_unary_inline(servicer.SetDataEncoding),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_OpenconfigRpcApi_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('openconfig.OpenconfigRpcApi', 'Get'): GetRequest.SerializeToString,
      ('openconfig.OpenconfigRpcApi', 'GetDataEncodings'): GetDataEncodingsRequest.SerializeToString,
      ('openconfig.OpenconfigRpcApi', 'GetModels'): GetModelsRequest.SerializeToString,
      ('openconfig.OpenconfigRpcApi', 'Set'): SetRequest.SerializeToString,
      ('openconfig.OpenconfigRpcApi', 'SetDataEncoding'): SetDataEncodingRequest.SerializeToString,
    }
    response_deserializers = {
      ('openconfig.OpenconfigRpcApi', 'Get'): GetResponse.FromString,
      ('openconfig.OpenconfigRpcApi', 'GetDataEncodings'): GetDataEncodingsResponse.FromString,
      ('openconfig.OpenconfigRpcApi', 'GetModels'): GetModelsResponse.FromString,
      ('openconfig.OpenconfigRpcApi', 'Set'): SetResponse.FromString,
      ('openconfig.OpenconfigRpcApi', 'SetDataEncoding'): SetDataEncodingResponse.FromString,
    }
    cardinalities = {
      'Get': cardinality.Cardinality.UNARY_UNARY,
      'GetDataEncodings': cardinality.Cardinality.UNARY_UNARY,
      'GetModels': cardinality.Cardinality.UNARY_UNARY,
      'Set': cardinality.Cardinality.UNARY_UNARY,
      'SetDataEncoding': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'openconfig.OpenconfigRpcApi', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
