// Code generated by protoc-gen-go. DO NOT EDIT.
// source: prpd_common.proto

package routing

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	jnx_addr "github.com/Juniper/vmx-docker-lwaftr/jroutes/stubs/jnx_addr"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

//*
// ----------------------------------------------------------------------------
// Different types of return codes to be sent back to client based on the
// operation was successful or not and if not, possibly more specific reasons
// as to why it failed.
// ----------------------------------------------------------------------------
type ReturnCode int32

const (
	// Operation was executed successfully
	ReturnCode_RET_SUCCESS ReturnCode = 0
	// General failure : operation not executed successfully
	ReturnCode_RET_FAILURE ReturnCode = 1
	// Entry was not found
	ReturnCode_RET_NOT_FOUND ReturnCode = 2
	// Invalid input paramters
	ReturnCode_RET_INVALID_PARAMS ReturnCode = 3
)

var ReturnCode_name = map[int32]string{
	0: "RET_SUCCESS",
	1: "RET_FAILURE",
	2: "RET_NOT_FOUND",
	3: "RET_INVALID_PARAMS",
}

var ReturnCode_value = map[string]int32{
	"RET_SUCCESS":        0,
	"RET_FAILURE":        1,
	"RET_NOT_FOUND":      2,
	"RET_INVALID_PARAMS": 3,
}

func (x ReturnCode) String() string {
	return proto.EnumName(ReturnCode_name, int32(x))
}

func (ReturnCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9a2b87256a7dae02, []int{0}
}

//*
// The table format allows the client to request the format that the
// server should use to represent tables in replies sent by the server
// to the client.
type RouteTableFormat int32

const (
	//* The server will represent tables by name as strings
	RouteTableFormat_TABLE_STRING RouteTableFormat = 0
	//* The server will represent tables by RPD table ID
	RouteTableFormat_TABLE_ID RouteTableFormat = 1
)

var RouteTableFormat_name = map[int32]string{
	0: "TABLE_STRING",
	1: "TABLE_ID",
}

var RouteTableFormat_value = map[string]int32{
	"TABLE_STRING": 0,
	"TABLE_ID":     1,
}

func (x RouteTableFormat) String() string {
	return proto.EnumName(RouteTableFormat_name, int32(x))
}

func (RouteTableFormat) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9a2b87256a7dae02, []int{1}
}

//*
// Routing table destination address families.
type RouteAfType int32

const (
	//* Unspecified
	RouteAfType_RT_AF_UNSPEC RouteAfType = 0
	//* IPv4 destination prefix
	RouteAfType_RT_AF_INET RouteAfType = 1
	//* IPv6 destination prefix
	RouteAfType_RT_AF_INET6 RouteAfType = 2
	//* IPv4 VPN (L3VPN) destination prefix
	RouteAfType_RT_AF_INETVPN RouteAfType = 3
	//* IPv6 VPN (L3VPN) destination prefix
	RouteAfType_RT_AF_INET6VPN RouteAfType = 4
	//* IPv4 Labeled-Unicast destination prefix.
	RouteAfType_RT_AF_LABELED_INET RouteAfType = 5
	//* IPv6 Labeled-Unicast destination prefix.
	RouteAfType_RT_AF_LABELED_INET6 RouteAfType = 6
	//* IPv4 SRTE destination prefix
	RouteAfType_RT_AF_INET_SRTE RouteAfType = 7
	//* IPv6 SRTE destination prefix
	RouteAfType_RT_AF_INET6_SRTE RouteAfType = 8
)

var RouteAfType_name = map[int32]string{
	0: "RT_AF_UNSPEC",
	1: "RT_AF_INET",
	2: "RT_AF_INET6",
	3: "RT_AF_INETVPN",
	4: "RT_AF_INET6VPN",
	5: "RT_AF_LABELED_INET",
	6: "RT_AF_LABELED_INET6",
	7: "RT_AF_INET_SRTE",
	8: "RT_AF_INET6_SRTE",
}

var RouteAfType_value = map[string]int32{
	"RT_AF_UNSPEC":        0,
	"RT_AF_INET":          1,
	"RT_AF_INET6":         2,
	"RT_AF_INETVPN":       3,
	"RT_AF_INET6VPN":      4,
	"RT_AF_LABELED_INET":  5,
	"RT_AF_LABELED_INET6": 6,
	"RT_AF_INET_SRTE":     7,
	"RT_AF_INET6_SRTE":    8,
}

func (x RouteAfType) String() string {
	return proto.EnumName(RouteAfType_name, int32(x))
}

func (RouteAfType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9a2b87256a7dae02, []int{2}
}

//*
// Label operations
type LabelOperation int32

const (
	LabelOperation_NOOP LabelOperation = 0
	LabelOperation_POP  LabelOperation = 1
	LabelOperation_PUSH LabelOperation = 2
	LabelOperation_SWAP LabelOperation = 3
)

var LabelOperation_name = map[int32]string{
	0: "NOOP",
	1: "POP",
	2: "PUSH",
	3: "SWAP",
}

var LabelOperation_value = map[string]int32{
	"NOOP": 0,
	"POP":  1,
	"PUSH": 2,
	"SWAP": 3,
}

func (x LabelOperation) String() string {
	return proto.EnumName(LabelOperation_name, int32(x))
}

func (LabelOperation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9a2b87256a7dae02, []int{3}
}

//*
// Protocol types that define protocols that added the route.
// RTPROTO_OTHER denotes other internal protocols currently not exposed
// to API.
type RouteProtoType int32

const (
	//* Matches any protocol
	RouteProtoType_ANY RouteProtoType = 0
	//* route is directly connected
	RouteProtoType_DIRECT RouteProtoType = 1
	//* route to local side of P2P interface
	RouteProtoType_LOCAL RouteProtoType = 2
	//* route was installed in kernel previously
	RouteProtoType_KERNEL RouteProtoType = 3
	//* route was received via a redirect
	RouteProtoType_REDIRECT RouteProtoType = 4
	//* OSPF2 AS Internal routes
	RouteProtoType_OSPF RouteProtoType = 5
	//* OSPF3 AS Internal routes
	RouteProtoType_OSPF3 RouteProtoType = 6
	//* OSPF AS Internal routes
	RouteProtoType_OSPF_ANY RouteProtoType = 7
	//* Routing Information protocol
	RouteProtoType_RIP RouteProtoType = 8
	//* Routing Information protocol for v6
	RouteProtoType_RIPNG RouteProtoType = 9
	//* Border gateway protocol
	RouteProtoType_BGP RouteProtoType = 10
	//* route is static
	RouteProtoType_STATIC RouteProtoType = 11
	//* IS-IS
	RouteProtoType_ISIS RouteProtoType = 12
	//* For IGMP stuff
	RouteProtoType_IGMP RouteProtoType = 13
	//* Aggregate route
	RouteProtoType_AGGREGATE RouteProtoType = 14
	//* Distance Vector Multicast Routing Protocol
	RouteProtoType_DVMRP RouteProtoType = 15
	//* Protocol Independent Multicast
	RouteProtoType_PIM RouteProtoType = 16
	//* Multicast Source Discovery Protocol
	RouteProtoType_MSDP RouteProtoType = 17
	//* MPLS switching
	RouteProtoType_MPLS RouteProtoType = 18
	//* RSVP
	RouteProtoType_RSVP RouteProtoType = 19
	//* Circuit Cross-Connect
	RouteProtoType_CCC RouteProtoType = 20
	//* LDP
	RouteProtoType_LDP RouteProtoType = 21
	//* VPN protocol, L3
	RouteProtoType_VPN RouteProtoType = 22
	//* MVPN protocol, L3
	RouteProtoType_MVPN RouteProtoType = 23
	//* multicast info
	RouteProtoType_MCAST RouteProtoType = 24
	//* VPN protocol, L2
	RouteProtoType_L2VPN RouteProtoType = 25
	//* l2circuit protocol
	RouteProtoType_L2CKT RouteProtoType = 26
	//* BGP Static
	RouteProtoType_BGP_STATIC RouteProtoType = 27
	//* RIFT
	RouteProtoType_RIFT RouteProtoType = 28
	//* Protocols not exposed and internal to Routing backend
	RouteProtoType_OTHER RouteProtoType = 29
)

var RouteProtoType_name = map[int32]string{
	0:  "ANY",
	1:  "DIRECT",
	2:  "LOCAL",
	3:  "KERNEL",
	4:  "REDIRECT",
	5:  "OSPF",
	6:  "OSPF3",
	7:  "OSPF_ANY",
	8:  "RIP",
	9:  "RIPNG",
	10: "BGP",
	11: "STATIC",
	12: "ISIS",
	13: "IGMP",
	14: "AGGREGATE",
	15: "DVMRP",
	16: "PIM",
	17: "MSDP",
	18: "MPLS",
	19: "RSVP",
	20: "CCC",
	21: "LDP",
	22: "VPN",
	23: "MVPN",
	24: "MCAST",
	25: "L2VPN",
	26: "L2CKT",
	27: "BGP_STATIC",
	28: "RIFT",
	29: "OTHER",
}

var RouteProtoType_value = map[string]int32{
	"ANY":        0,
	"DIRECT":     1,
	"LOCAL":      2,
	"KERNEL":     3,
	"REDIRECT":   4,
	"OSPF":       5,
	"OSPF3":      6,
	"OSPF_ANY":   7,
	"RIP":        8,
	"RIPNG":      9,
	"BGP":        10,
	"STATIC":     11,
	"ISIS":       12,
	"IGMP":       13,
	"AGGREGATE":  14,
	"DVMRP":      15,
	"PIM":        16,
	"MSDP":       17,
	"MPLS":       18,
	"RSVP":       19,
	"CCC":        20,
	"LDP":        21,
	"VPN":        22,
	"MVPN":       23,
	"MCAST":      24,
	"L2VPN":      25,
	"L2CKT":      26,
	"BGP_STATIC": 27,
	"RIFT":       28,
	"OTHER":      29,
}

func (x RouteProtoType) String() string {
	return proto.EnumName(RouteProtoType_name, int32(x))
}

func (RouteProtoType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9a2b87256a7dae02, []int{4}
}

//* Well-known label values defined by RFC 3032. These must only be
//  used in label stacks in accordance with the rules of RFC 3032.
type LabelEntry_WellKnownLabels int32

const (
	//* IPv4 Explicit NULL: valid only at bottom of stack
	LabelEntry_IPV4_EXPLICIT_NULL_LABEL LabelEntry_WellKnownLabels = 0
	//* Router Alert: valid anywhere in a label stack except bottom
	LabelEntry_ROUTER_ALERT_LABEL LabelEntry_WellKnownLabels = 1
	//* IPv6 Explict NULL: valid only at bottom of stack
	LabelEntry_IPV6_EXPLICIT_NULL_LABEL LabelEntry_WellKnownLabels = 2
	//* Implicit NULL: See RFC 3032
	LabelEntry_IMPLICIT_NULL_LABEL LabelEntry_WellKnownLabels = 3
)

var LabelEntry_WellKnownLabels_name = map[int32]string{
	0: "IPV4_EXPLICIT_NULL_LABEL",
	1: "ROUTER_ALERT_LABEL",
	2: "IPV6_EXPLICIT_NULL_LABEL",
	3: "IMPLICIT_NULL_LABEL",
}

var LabelEntry_WellKnownLabels_value = map[string]int32{
	"IPV4_EXPLICIT_NULL_LABEL": 0,
	"ROUTER_ALERT_LABEL":       1,
	"IPV6_EXPLICIT_NULL_LABEL": 2,
	"IMPLICIT_NULL_LABEL":      3,
}

func (x LabelEntry_WellKnownLabels) String() string {
	return proto.EnumName(LabelEntry_WellKnownLabels_name, int32(x))
}

func (LabelEntry_WellKnownLabels) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9a2b87256a7dae02, []int{8, 0}
}

//*
// Routing table (RIB) name uniquely identifying a route table,
// formatted as a string per JUNOS convention.
type RouteTableName struct {
	//* Table name. REQUIRED
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RouteTableName) Reset()         { *m = RouteTableName{} }
func (m *RouteTableName) String() string { return proto.CompactTextString(m) }
func (*RouteTableName) ProtoMessage()    {}
func (*RouteTableName) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a2b87256a7dae02, []int{0}
}

func (m *RouteTableName) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteTableName.Unmarshal(m, b)
}
func (m *RouteTableName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteTableName.Marshal(b, m, deterministic)
}
func (m *RouteTableName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteTableName.Merge(m, src)
}
func (m *RouteTableName) XXX_Size() int {
	return xxx_messageInfo_RouteTableName.Size(m)
}
func (m *RouteTableName) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteTableName.DiscardUnknown(m)
}

var xxx_messageInfo_RouteTableName proto.InternalMessageInfo

func (m *RouteTableName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

//*
// Routing table identifier as an integer value uniquely identifying a table.
type RouteTableId struct {
	//* Table identifier. REQUIRED
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RouteTableId) Reset()         { *m = RouteTableId{} }
func (m *RouteTableId) String() string { return proto.CompactTextString(m) }
func (*RouteTableId) ProtoMessage()    {}
func (*RouteTableId) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a2b87256a7dae02, []int{1}
}

func (m *RouteTableId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteTableId.Unmarshal(m, b)
}
func (m *RouteTableId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteTableId.Marshal(b, m, deterministic)
}
func (m *RouteTableId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteTableId.Merge(m, src)
}
func (m *RouteTableId) XXX_Size() int {
	return xxx_messageInfo_RouteTableId.Size(m)
}
func (m *RouteTableId) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteTableId.DiscardUnknown(m)
}

var xxx_messageInfo_RouteTableId proto.InternalMessageInfo

func (m *RouteTableId) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

//*
// Routing table (RIB), which may either be specified as a string or
// RPD table ID.
type RouteTable struct {
	// Types that are valid to be assigned to RtTableFormat:
	//	*RouteTable_RttId
	//	*RouteTable_RttName
	RtTableFormat        isRouteTable_RtTableFormat `protobuf_oneof:"RtTableFormat"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *RouteTable) Reset()         { *m = RouteTable{} }
func (m *RouteTable) String() string { return proto.CompactTextString(m) }
func (*RouteTable) ProtoMessage()    {}
func (*RouteTable) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a2b87256a7dae02, []int{2}
}

func (m *RouteTable) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteTable.Unmarshal(m, b)
}
func (m *RouteTable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteTable.Marshal(b, m, deterministic)
}
func (m *RouteTable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteTable.Merge(m, src)
}
func (m *RouteTable) XXX_Size() int {
	return xxx_messageInfo_RouteTable.Size(m)
}
func (m *RouteTable) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteTable.DiscardUnknown(m)
}

var xxx_messageInfo_RouteTable proto.InternalMessageInfo

type isRouteTable_RtTableFormat interface {
	isRouteTable_RtTableFormat()
}

type RouteTable_RttId struct {
	RttId *RouteTableId `protobuf:"bytes,1,opt,name=rtt_id,json=rttId,proto3,oneof"`
}

type RouteTable_RttName struct {
	RttName *RouteTableName `protobuf:"bytes,2,opt,name=rtt_name,json=rttName,proto3,oneof"`
}

func (*RouteTable_RttId) isRouteTable_RtTableFormat() {}

func (*RouteTable_RttName) isRouteTable_RtTableFormat() {}

func (m *RouteTable) GetRtTableFormat() isRouteTable_RtTableFormat {
	if m != nil {
		return m.RtTableFormat
	}
	return nil
}

func (m *RouteTable) GetRttId() *RouteTableId {
	if x, ok := m.GetRtTableFormat().(*RouteTable_RttId); ok {
		return x.RttId
	}
	return nil
}

func (m *RouteTable) GetRttName() *RouteTableName {
	if x, ok := m.GetRtTableFormat().(*RouteTable_RttName); ok {
		return x.RttName
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RouteTable) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RouteTable_OneofMarshaler, _RouteTable_OneofUnmarshaler, _RouteTable_OneofSizer, []interface{}{
		(*RouteTable_RttId)(nil),
		(*RouteTable_RttName)(nil),
	}
}

func _RouteTable_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RouteTable)
	// RtTableFormat
	switch x := m.RtTableFormat.(type) {
	case *RouteTable_RttId:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RttId); err != nil {
			return err
		}
	case *RouteTable_RttName:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RttName); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RouteTable.RtTableFormat has unexpected type %T", x)
	}
	return nil
}

func _RouteTable_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RouteTable)
	switch tag {
	case 1: // RtTableFormat.rtt_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RouteTableId)
		err := b.DecodeMessage(msg)
		m.RtTableFormat = &RouteTable_RttId{msg}
		return true, err
	case 2: // RtTableFormat.rtt_name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RouteTableName)
		err := b.DecodeMessage(msg)
		m.RtTableFormat = &RouteTable_RttName{msg}
		return true, err
	default:
		return false, nil
	}
}

func _RouteTable_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RouteTable)
	// RtTableFormat
	switch x := m.RtTableFormat.(type) {
	case *RouteTable_RttId:
		s := proto.Size(x.RttId)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RouteTable_RttName:
		s := proto.Size(x.RttName)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

//* RFC 4364 Route type 0: 2-byte AS and assigned number
type RdType0 struct {
	//* 2 byte AS number
	AsNumber uint32 `protobuf:"varint,1,opt,name=as_number,json=asNumber,proto3" json:"as_number,omitempty"`
	//* 4 byte assigned number subfield
	AssignedNumber       uint32   `protobuf:"varint,2,opt,name=assigned_number,json=assignedNumber,proto3" json:"assigned_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RdType0) Reset()         { *m = RdType0{} }
func (m *RdType0) String() string { return proto.CompactTextString(m) }
func (*RdType0) ProtoMessage()    {}
func (*RdType0) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a2b87256a7dae02, []int{3}
}

func (m *RdType0) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RdType0.Unmarshal(m, b)
}
func (m *RdType0) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RdType0.Marshal(b, m, deterministic)
}
func (m *RdType0) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RdType0.Merge(m, src)
}
func (m *RdType0) XXX_Size() int {
	return xxx_messageInfo_RdType0.Size(m)
}
func (m *RdType0) XXX_DiscardUnknown() {
	xxx_messageInfo_RdType0.DiscardUnknown(m)
}

var xxx_messageInfo_RdType0 proto.InternalMessageInfo

func (m *RdType0) GetAsNumber() uint32 {
	if m != nil {
		return m.AsNumber
	}
	return 0
}

func (m *RdType0) GetAssignedNumber() uint32 {
	if m != nil {
		return m.AssignedNumber
	}
	return 0
}

//* RFC 4364 Route type 1: IPv4 address and assigned number
type RdType1 struct {
	//* 4 byte IP address
	IpAddress *jnx_addr.IpAddress `protobuf:"bytes,1,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	//* 2 byte assigned number subfield
	AssignedNumber       uint32   `protobuf:"varint,2,opt,name=assigned_number,json=assignedNumber,proto3" json:"assigned_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RdType1) Reset()         { *m = RdType1{} }
func (m *RdType1) String() string { return proto.CompactTextString(m) }
func (*RdType1) ProtoMessage()    {}
func (*RdType1) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a2b87256a7dae02, []int{4}
}

func (m *RdType1) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RdType1.Unmarshal(m, b)
}
func (m *RdType1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RdType1.Marshal(b, m, deterministic)
}
func (m *RdType1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RdType1.Merge(m, src)
}
func (m *RdType1) XXX_Size() int {
	return xxx_messageInfo_RdType1.Size(m)
}
func (m *RdType1) XXX_DiscardUnknown() {
	xxx_messageInfo_RdType1.DiscardUnknown(m)
}

var xxx_messageInfo_RdType1 proto.InternalMessageInfo

func (m *RdType1) GetIpAddress() *jnx_addr.IpAddress {
	if m != nil {
		return m.IpAddress
	}
	return nil
}

func (m *RdType1) GetAssignedNumber() uint32 {
	if m != nil {
		return m.AssignedNumber
	}
	return 0
}

//* RFC 4364 Route type 2: 4-byte AS and assigned number
type RdType2 struct {
	//* 4 byte AS number
	AsNumber uint32 `protobuf:"varint,1,opt,name=as_number,json=asNumber,proto3" json:"as_number,omitempty"`
	// 2 byte assigned number subfield
	AssignedNumber       uint32   `protobuf:"varint,2,opt,name=assigned_number,json=assignedNumber,proto3" json:"assigned_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RdType2) Reset()         { *m = RdType2{} }
func (m *RdType2) String() string { return proto.CompactTextString(m) }
func (*RdType2) ProtoMessage()    {}
func (*RdType2) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a2b87256a7dae02, []int{5}
}

func (m *RdType2) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RdType2.Unmarshal(m, b)
}
func (m *RdType2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RdType2.Marshal(b, m, deterministic)
}
func (m *RdType2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RdType2.Merge(m, src)
}
func (m *RdType2) XXX_Size() int {
	return xxx_messageInfo_RdType2.Size(m)
}
func (m *RdType2) XXX_DiscardUnknown() {
	xxx_messageInfo_RdType2.DiscardUnknown(m)
}

var xxx_messageInfo_RdType2 proto.InternalMessageInfo

func (m *RdType2) GetAsNumber() uint32 {
	if m != nil {
		return m.AsNumber
	}
	return 0
}

func (m *RdType2) GetAssignedNumber() uint32 {
	if m != nil {
		return m.AssignedNumber
	}
	return 0
}

//*
// An RFC 4364 route distinguisher to distinguish customer VPN routes
// within the BGP NLRIs. Valid RD can be type 0, type 1, or type 2.
type RouteDistinguisher struct {
	// Types that are valid to be assigned to RdFormat:
	//	*RouteDistinguisher_Rd0
	//	*RouteDistinguisher_Rd1
	//	*RouteDistinguisher_Rd2
	RdFormat             isRouteDistinguisher_RdFormat `protobuf_oneof:"RdFormat"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *RouteDistinguisher) Reset()         { *m = RouteDistinguisher{} }
func (m *RouteDistinguisher) String() string { return proto.CompactTextString(m) }
func (*RouteDistinguisher) ProtoMessage()    {}
func (*RouteDistinguisher) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a2b87256a7dae02, []int{6}
}

func (m *RouteDistinguisher) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteDistinguisher.Unmarshal(m, b)
}
func (m *RouteDistinguisher) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteDistinguisher.Marshal(b, m, deterministic)
}
func (m *RouteDistinguisher) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteDistinguisher.Merge(m, src)
}
func (m *RouteDistinguisher) XXX_Size() int {
	return xxx_messageInfo_RouteDistinguisher.Size(m)
}
func (m *RouteDistinguisher) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteDistinguisher.DiscardUnknown(m)
}

var xxx_messageInfo_RouteDistinguisher proto.InternalMessageInfo

type isRouteDistinguisher_RdFormat interface {
	isRouteDistinguisher_RdFormat()
}

type RouteDistinguisher_Rd0 struct {
	Rd0 *RdType0 `protobuf:"bytes,1,opt,name=rd0,proto3,oneof"`
}

type RouteDistinguisher_Rd1 struct {
	Rd1 *RdType1 `protobuf:"bytes,2,opt,name=rd1,proto3,oneof"`
}

type RouteDistinguisher_Rd2 struct {
	Rd2 *RdType2 `protobuf:"bytes,3,opt,name=rd2,proto3,oneof"`
}

func (*RouteDistinguisher_Rd0) isRouteDistinguisher_RdFormat() {}

func (*RouteDistinguisher_Rd1) isRouteDistinguisher_RdFormat() {}

func (*RouteDistinguisher_Rd2) isRouteDistinguisher_RdFormat() {}

func (m *RouteDistinguisher) GetRdFormat() isRouteDistinguisher_RdFormat {
	if m != nil {
		return m.RdFormat
	}
	return nil
}

func (m *RouteDistinguisher) GetRd0() *RdType0 {
	if x, ok := m.GetRdFormat().(*RouteDistinguisher_Rd0); ok {
		return x.Rd0
	}
	return nil
}

func (m *RouteDistinguisher) GetRd1() *RdType1 {
	if x, ok := m.GetRdFormat().(*RouteDistinguisher_Rd1); ok {
		return x.Rd1
	}
	return nil
}

func (m *RouteDistinguisher) GetRd2() *RdType2 {
	if x, ok := m.GetRdFormat().(*RouteDistinguisher_Rd2); ok {
		return x.Rd2
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RouteDistinguisher) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RouteDistinguisher_OneofMarshaler, _RouteDistinguisher_OneofUnmarshaler, _RouteDistinguisher_OneofSizer, []interface{}{
		(*RouteDistinguisher_Rd0)(nil),
		(*RouteDistinguisher_Rd1)(nil),
		(*RouteDistinguisher_Rd2)(nil),
	}
}

func _RouteDistinguisher_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RouteDistinguisher)
	// RdFormat
	switch x := m.RdFormat.(type) {
	case *RouteDistinguisher_Rd0:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Rd0); err != nil {
			return err
		}
	case *RouteDistinguisher_Rd1:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Rd1); err != nil {
			return err
		}
	case *RouteDistinguisher_Rd2:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Rd2); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RouteDistinguisher.RdFormat has unexpected type %T", x)
	}
	return nil
}

func _RouteDistinguisher_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RouteDistinguisher)
	switch tag {
	case 1: // RdFormat.rd0
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RdType0)
		err := b.DecodeMessage(msg)
		m.RdFormat = &RouteDistinguisher_Rd0{msg}
		return true, err
	case 2: // RdFormat.rd1
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RdType1)
		err := b.DecodeMessage(msg)
		m.RdFormat = &RouteDistinguisher_Rd1{msg}
		return true, err
	case 3: // RdFormat.rd2
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RdType2)
		err := b.DecodeMessage(msg)
		m.RdFormat = &RouteDistinguisher_Rd2{msg}
		return true, err
	default:
		return false, nil
	}
}

func _RouteDistinguisher_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RouteDistinguisher)
	// RdFormat
	switch x := m.RdFormat.(type) {
	case *RouteDistinguisher_Rd0:
		s := proto.Size(x.Rd0)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RouteDistinguisher_Rd1:
		s := proto.Size(x.Rd1)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RouteDistinguisher_Rd2:
		s := proto.Size(x.Rd2)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

//*
// L3VPN route destination address prefix composed of a
// route distinguisher (RD) and IP address.
type L3VpnAddress struct {
	//* Route distinguisher. REQUIRED
	Rd *RouteDistinguisher `protobuf:"bytes,1,opt,name=rd,proto3" json:"rd,omitempty"`
	//* IPv4 or IPv6 VPN customer address. REQUIRED.
	VpnAddr              *jnx_addr.IpAddress `protobuf:"bytes,2,opt,name=vpn_addr,json=vpnAddr,proto3" json:"vpn_addr,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *L3VpnAddress) Reset()         { *m = L3VpnAddress{} }
func (m *L3VpnAddress) String() string { return proto.CompactTextString(m) }
func (*L3VpnAddress) ProtoMessage()    {}
func (*L3VpnAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a2b87256a7dae02, []int{7}
}

func (m *L3VpnAddress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L3VpnAddress.Unmarshal(m, b)
}
func (m *L3VpnAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L3VpnAddress.Marshal(b, m, deterministic)
}
func (m *L3VpnAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L3VpnAddress.Merge(m, src)
}
func (m *L3VpnAddress) XXX_Size() int {
	return xxx_messageInfo_L3VpnAddress.Size(m)
}
func (m *L3VpnAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_L3VpnAddress.DiscardUnknown(m)
}

var xxx_messageInfo_L3VpnAddress proto.InternalMessageInfo

func (m *L3VpnAddress) GetRd() *RouteDistinguisher {
	if m != nil {
		return m.Rd
	}
	return nil
}

func (m *L3VpnAddress) GetVpnAddr() *jnx_addr.IpAddress {
	if m != nil {
		return m.VpnAddr
	}
	return nil
}

//*
// A single MPLS Label entry as defined by RFC 3032
type LabelEntry struct {
	//* One of either well_known_labels or else a valid 20-bit unsigned
	//  label value that must be less than decimal value 1048576 and not
	//  within the reserved label range of 4 through 15 (inclusive).
	//  REQUIRED
	Label uint32 `protobuf:"varint,1,opt,name=label,proto3" json:"label,omitempty"`
	//* A valid 3-bit unsigned traffic class/QoS value less than decimal value 8.
	//  Optional (defaults to 0). READ-ONLY
	TrafficClass uint32 `protobuf:"varint,2,opt,name=traffic_class,json=trafficClass,proto3" json:"traffic_class,omitempty"`
	//* A valid 8-bit unsigned TTL value less than decimal value 256.
	//  Optional (defaults to 0). READ-ONLY
	Ttl uint32 `protobuf:"varint,3,opt,name=ttl,proto3" json:"ttl,omitempty"`
	//* Indicates that this Label stack entry the bottom of the label
	//  stack. Bottom-of-Stack will always be set by the library and must
	//  never set by the client. READ-ONLY
	BottomOfStack        bool     `protobuf:"varint,4,opt,name=bottom_of_stack,json=bottomOfStack,proto3" json:"bottom_of_stack,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LabelEntry) Reset()         { *m = LabelEntry{} }
func (m *LabelEntry) String() string { return proto.CompactTextString(m) }
func (*LabelEntry) ProtoMessage()    {}
func (*LabelEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a2b87256a7dae02, []int{8}
}

func (m *LabelEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LabelEntry.Unmarshal(m, b)
}
func (m *LabelEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LabelEntry.Marshal(b, m, deterministic)
}
func (m *LabelEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LabelEntry.Merge(m, src)
}
func (m *LabelEntry) XXX_Size() int {
	return xxx_messageInfo_LabelEntry.Size(m)
}
func (m *LabelEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_LabelEntry.DiscardUnknown(m)
}

var xxx_messageInfo_LabelEntry proto.InternalMessageInfo

func (m *LabelEntry) GetLabel() uint32 {
	if m != nil {
		return m.Label
	}
	return 0
}

func (m *LabelEntry) GetTrafficClass() uint32 {
	if m != nil {
		return m.TrafficClass
	}
	return 0
}

func (m *LabelEntry) GetTtl() uint32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

func (m *LabelEntry) GetBottomOfStack() bool {
	if m != nil {
		return m.BottomOfStack
	}
	return false
}

//*
// A single MPLS Label stack entry with the operation for the label entry
type LabelStackEntry struct {
	Opcode               LabelOperation `protobuf:"varint,1,opt,name=opcode,proto3,enum=routing.LabelOperation" json:"opcode,omitempty"`
	LabelEntry           *LabelEntry    `protobuf:"bytes,2,opt,name=label_entry,json=labelEntry,proto3" json:"label_entry,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *LabelStackEntry) Reset()         { *m = LabelStackEntry{} }
func (m *LabelStackEntry) String() string { return proto.CompactTextString(m) }
func (*LabelStackEntry) ProtoMessage()    {}
func (*LabelStackEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a2b87256a7dae02, []int{9}
}

func (m *LabelStackEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LabelStackEntry.Unmarshal(m, b)
}
func (m *LabelStackEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LabelStackEntry.Marshal(b, m, deterministic)
}
func (m *LabelStackEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LabelStackEntry.Merge(m, src)
}
func (m *LabelStackEntry) XXX_Size() int {
	return xxx_messageInfo_LabelStackEntry.Size(m)
}
func (m *LabelStackEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_LabelStackEntry.DiscardUnknown(m)
}

var xxx_messageInfo_LabelStackEntry proto.InternalMessageInfo

func (m *LabelStackEntry) GetOpcode() LabelOperation {
	if m != nil {
		return m.Opcode
	}
	return LabelOperation_NOOP
}

func (m *LabelStackEntry) GetLabelEntry() *LabelEntry {
	if m != nil {
		return m.LabelEntry
	}
	return nil
}

//*
// Holds the mpls label used to represent label address in route lookups
type MplsAddress struct {
	//*
	// A valid 20-bit unsigned label value that must be less than decimal
	// value 1048576 and not within the reserved label range of 4 through
	// 15 (inclusive).
	// REQUIRED
	Label                uint32   `protobuf:"varint,1,opt,name=label,proto3" json:"label,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MplsAddress) Reset()         { *m = MplsAddress{} }
func (m *MplsAddress) String() string { return proto.CompactTextString(m) }
func (*MplsAddress) ProtoMessage()    {}
func (*MplsAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a2b87256a7dae02, []int{10}
}

func (m *MplsAddress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MplsAddress.Unmarshal(m, b)
}
func (m *MplsAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MplsAddress.Marshal(b, m, deterministic)
}
func (m *MplsAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MplsAddress.Merge(m, src)
}
func (m *MplsAddress) XXX_Size() int {
	return xxx_messageInfo_MplsAddress.Size(m)
}
func (m *MplsAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_MplsAddress.DiscardUnknown(m)
}

var xxx_messageInfo_MplsAddress proto.InternalMessageInfo

func (m *MplsAddress) GetLabel() uint32 {
	if m != nil {
		return m.Label
	}
	return 0
}

//*
// A label stack constructed according to the rules of RFC 3032.
type LabelStack struct {
	//* An ordered list of one or more label stack entries beginning with
	//  the bottom of the stack and ending with the top of the stack.
	//  REQUIRED (one or more entry)
	Entries              []*LabelStackEntry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *LabelStack) Reset()         { *m = LabelStack{} }
func (m *LabelStack) String() string { return proto.CompactTextString(m) }
func (*LabelStack) ProtoMessage()    {}
func (*LabelStack) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a2b87256a7dae02, []int{11}
}

func (m *LabelStack) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LabelStack.Unmarshal(m, b)
}
func (m *LabelStack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LabelStack.Marshal(b, m, deterministic)
}
func (m *LabelStack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LabelStack.Merge(m, src)
}
func (m *LabelStack) XXX_Size() int {
	return xxx_messageInfo_LabelStack.Size(m)
}
func (m *LabelStack) XXX_DiscardUnknown() {
	xxx_messageInfo_LabelStack.DiscardUnknown(m)
}

var xxx_messageInfo_LabelStack proto.InternalMessageInfo

func (m *LabelStack) GetEntries() []*LabelStackEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

//*
// Segment Identifier (SID). Either 4 octet MPLS SID or a 16 octet IPv6 SID
// Currently IPv6 SID is not supported.
type SidEntry struct {
	// Types that are valid to be assigned to SidEntryType:
	//	*SidEntry_SidLabelEntry
	SidEntryType         isSidEntry_SidEntryType `protobuf_oneof:"SidEntryType"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *SidEntry) Reset()         { *m = SidEntry{} }
func (m *SidEntry) String() string { return proto.CompactTextString(m) }
func (*SidEntry) ProtoMessage()    {}
func (*SidEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a2b87256a7dae02, []int{12}
}

func (m *SidEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SidEntry.Unmarshal(m, b)
}
func (m *SidEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SidEntry.Marshal(b, m, deterministic)
}
func (m *SidEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SidEntry.Merge(m, src)
}
func (m *SidEntry) XXX_Size() int {
	return xxx_messageInfo_SidEntry.Size(m)
}
func (m *SidEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_SidEntry.DiscardUnknown(m)
}

var xxx_messageInfo_SidEntry proto.InternalMessageInfo

type isSidEntry_SidEntryType interface {
	isSidEntry_SidEntryType()
}

type SidEntry_SidLabelEntry struct {
	SidLabelEntry *LabelEntry `protobuf:"bytes,1,opt,name=sid_label_entry,json=sidLabelEntry,proto3,oneof"`
}

func (*SidEntry_SidLabelEntry) isSidEntry_SidEntryType() {}

func (m *SidEntry) GetSidEntryType() isSidEntry_SidEntryType {
	if m != nil {
		return m.SidEntryType
	}
	return nil
}

func (m *SidEntry) GetSidLabelEntry() *LabelEntry {
	if x, ok := m.GetSidEntryType().(*SidEntry_SidLabelEntry); ok {
		return x.SidLabelEntry
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SidEntry) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SidEntry_OneofMarshaler, _SidEntry_OneofUnmarshaler, _SidEntry_OneofSizer, []interface{}{
		(*SidEntry_SidLabelEntry)(nil),
	}
}

func _SidEntry_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SidEntry)
	// SidEntryType
	switch x := m.SidEntryType.(type) {
	case *SidEntry_SidLabelEntry:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SidLabelEntry); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SidEntry.SidEntryType has unexpected type %T", x)
	}
	return nil
}

func _SidEntry_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SidEntry)
	switch tag {
	case 1: // SidEntryType.sid_label_entry
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(LabelEntry)
		err := b.DecodeMessage(msg)
		m.SidEntryType = &SidEntry_SidLabelEntry{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SidEntry_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SidEntry)
	// SidEntryType
	switch x := m.SidEntryType.(type) {
	case *SidEntry_SidLabelEntry:
		s := proto.Size(x.SidLabelEntry)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

//*
// Segment Type 1: SID only, in the form of MPLS Label
type SegmentType1 struct {
	//* MPLS label for the SID. REQUIRED
	SidLabelEntry        *LabelEntry `protobuf:"bytes,1,opt,name=sid_label_entry,json=sidLabelEntry,proto3" json:"sid_label_entry,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SegmentType1) Reset()         { *m = SegmentType1{} }
func (m *SegmentType1) String() string { return proto.CompactTextString(m) }
func (*SegmentType1) ProtoMessage()    {}
func (*SegmentType1) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a2b87256a7dae02, []int{13}
}

func (m *SegmentType1) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SegmentType1.Unmarshal(m, b)
}
func (m *SegmentType1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SegmentType1.Marshal(b, m, deterministic)
}
func (m *SegmentType1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegmentType1.Merge(m, src)
}
func (m *SegmentType1) XXX_Size() int {
	return xxx_messageInfo_SegmentType1.Size(m)
}
func (m *SegmentType1) XXX_DiscardUnknown() {
	xxx_messageInfo_SegmentType1.DiscardUnknown(m)
}

var xxx_messageInfo_SegmentType1 proto.InternalMessageInfo

func (m *SegmentType1) GetSidLabelEntry() *LabelEntry {
	if m != nil {
		return m.SidLabelEntry
	}
	return nil
}

//*
// SR-TE Segment. Only SegemntType1 is currently supported.
// Other types are for internal use only.
type SRTESegment struct {
	// Types that are valid to be assigned to SRTEType:
	//	*SRTESegment_SegmentType1
	SRTEType             isSRTESegment_SRTEType `protobuf_oneof:"SRTEType"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *SRTESegment) Reset()         { *m = SRTESegment{} }
func (m *SRTESegment) String() string { return proto.CompactTextString(m) }
func (*SRTESegment) ProtoMessage()    {}
func (*SRTESegment) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a2b87256a7dae02, []int{14}
}

func (m *SRTESegment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SRTESegment.Unmarshal(m, b)
}
func (m *SRTESegment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SRTESegment.Marshal(b, m, deterministic)
}
func (m *SRTESegment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SRTESegment.Merge(m, src)
}
func (m *SRTESegment) XXX_Size() int {
	return xxx_messageInfo_SRTESegment.Size(m)
}
func (m *SRTESegment) XXX_DiscardUnknown() {
	xxx_messageInfo_SRTESegment.DiscardUnknown(m)
}

var xxx_messageInfo_SRTESegment proto.InternalMessageInfo

type isSRTESegment_SRTEType interface {
	isSRTESegment_SRTEType()
}

type SRTESegment_SegmentType1 struct {
	SegmentType1 *SegmentType1 `protobuf:"bytes,1,opt,name=segment_type1,json=segmentType1,proto3,oneof"`
}

func (*SRTESegment_SegmentType1) isSRTESegment_SRTEType() {}

func (m *SRTESegment) GetSRTEType() isSRTESegment_SRTEType {
	if m != nil {
		return m.SRTEType
	}
	return nil
}

func (m *SRTESegment) GetSegmentType1() *SegmentType1 {
	if x, ok := m.GetSRTEType().(*SRTESegment_SegmentType1); ok {
		return x.SegmentType1
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SRTESegment) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SRTESegment_OneofMarshaler, _SRTESegment_OneofUnmarshaler, _SRTESegment_OneofSizer, []interface{}{
		(*SRTESegment_SegmentType1)(nil),
	}
}

func _SRTESegment_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SRTESegment)
	// SRTEType
	switch x := m.SRTEType.(type) {
	case *SRTESegment_SegmentType1:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SegmentType1); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SRTESegment.SRTEType has unexpected type %T", x)
	}
	return nil
}

func _SRTESegment_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SRTESegment)
	switch tag {
	case 1: // SRTEType.segment_type1
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SegmentType1)
		err := b.DecodeMessage(msg)
		m.SRTEType = &SRTESegment_SegmentType1{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SRTESegment_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SRTESegment)
	// SRTEType
	switch x := m.SRTEType.(type) {
	case *SRTESegment_SegmentType1:
		s := proto.Size(x.SegmentType1)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

//*
// SR-TE Segment List.
type SRTESegmentList struct {
	//*
	// Weight specifies the weight associated to a given segment list. The
	// weight is used in order to apply weighted ECMP mechanism when steering
	// traffic into a policy that includes multiple Segment Lists.
	// This parameter is needed to be set only when > 1 segment list is set.
	Weight uint32 `protobuf:"varint,1,opt,name=weight,proto3" json:"weight,omitempty"`
	//*
	// Segments, one or more segments can be programmed. REQUIRED.
	// A maximum of 5 segements are supported.
	Segments             []*SRTESegment `protobuf:"bytes,2,rep,name=segments,proto3" json:"segments,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *SRTESegmentList) Reset()         { *m = SRTESegmentList{} }
func (m *SRTESegmentList) String() string { return proto.CompactTextString(m) }
func (*SRTESegmentList) ProtoMessage()    {}
func (*SRTESegmentList) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a2b87256a7dae02, []int{15}
}

func (m *SRTESegmentList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SRTESegmentList.Unmarshal(m, b)
}
func (m *SRTESegmentList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SRTESegmentList.Marshal(b, m, deterministic)
}
func (m *SRTESegmentList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SRTESegmentList.Merge(m, src)
}
func (m *SRTESegmentList) XXX_Size() int {
	return xxx_messageInfo_SRTESegmentList.Size(m)
}
func (m *SRTESegmentList) XXX_DiscardUnknown() {
	xxx_messageInfo_SRTESegmentList.DiscardUnknown(m)
}

var xxx_messageInfo_SRTESegmentList proto.InternalMessageInfo

func (m *SRTESegmentList) GetWeight() uint32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *SRTESegmentList) GetSegments() []*SRTESegment {
	if m != nil {
		return m.Segments
	}
	return nil
}

//*
// SR-TE Distinguisher
type SRTEDistinguisher struct {
	//*
	// SR policy originator. This is a numeric value that the originator can
	// use to make unique when there are mulitple occurances of same SR policy.
	// There is no verification done for the value of this, it has to be set
	// and should be a non zero value.
	Distinguisher        uint32   `protobuf:"varint,1,opt,name=distinguisher,proto3" json:"distinguisher,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SRTEDistinguisher) Reset()         { *m = SRTEDistinguisher{} }
func (m *SRTEDistinguisher) String() string { return proto.CompactTextString(m) }
func (*SRTEDistinguisher) ProtoMessage()    {}
func (*SRTEDistinguisher) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a2b87256a7dae02, []int{16}
}

func (m *SRTEDistinguisher) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SRTEDistinguisher.Unmarshal(m, b)
}
func (m *SRTEDistinguisher) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SRTEDistinguisher.Marshal(b, m, deterministic)
}
func (m *SRTEDistinguisher) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SRTEDistinguisher.Merge(m, src)
}
func (m *SRTEDistinguisher) XXX_Size() int {
	return xxx_messageInfo_SRTEDistinguisher.Size(m)
}
func (m *SRTEDistinguisher) XXX_DiscardUnknown() {
	xxx_messageInfo_SRTEDistinguisher.DiscardUnknown(m)
}

var xxx_messageInfo_SRTEDistinguisher proto.InternalMessageInfo

func (m *SRTEDistinguisher) GetDistinguisher() uint32 {
	if m != nil {
		return m.Distinguisher
	}
	return 0
}

//*
// SR-TE Color
type SRTEColor struct {
	//*
	// SR policy color. This is a value used to match destination prefix to the
	// policy. All prefixes of a particular color value is steered into policy
	// that has the same color.
	Color                uint32   `protobuf:"varint,1,opt,name=color,proto3" json:"color,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SRTEColor) Reset()         { *m = SRTEColor{} }
func (m *SRTEColor) String() string { return proto.CompactTextString(m) }
func (*SRTEColor) ProtoMessage()    {}
func (*SRTEColor) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a2b87256a7dae02, []int{17}
}

func (m *SRTEColor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SRTEColor.Unmarshal(m, b)
}
func (m *SRTEColor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SRTEColor.Marshal(b, m, deterministic)
}
func (m *SRTEColor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SRTEColor.Merge(m, src)
}
func (m *SRTEColor) XXX_Size() int {
	return xxx_messageInfo_SRTEColor.Size(m)
}
func (m *SRTEColor) XXX_DiscardUnknown() {
	xxx_messageInfo_SRTEColor.DiscardUnknown(m)
}

var xxx_messageInfo_SRTEColor proto.InternalMessageInfo

func (m *SRTEColor) GetColor() uint32 {
	if m != nil {
		return m.Color
	}
	return 0
}

//*
// SR-TE Binding SID. This is an optional parameter.
// Note IPv6 Binding SID not supported so in SidEntry only MPLS label SID is
// defined.
type SRTEBindingSID struct {
	//* Binding SID
	BindingSrId          *SidEntry `protobuf:"bytes,1,opt,name=binding_sr_id,json=bindingSrId,proto3" json:"binding_sr_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *SRTEBindingSID) Reset()         { *m = SRTEBindingSID{} }
func (m *SRTEBindingSID) String() string { return proto.CompactTextString(m) }
func (*SRTEBindingSID) ProtoMessage()    {}
func (*SRTEBindingSID) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a2b87256a7dae02, []int{18}
}

func (m *SRTEBindingSID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SRTEBindingSID.Unmarshal(m, b)
}
func (m *SRTEBindingSID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SRTEBindingSID.Marshal(b, m, deterministic)
}
func (m *SRTEBindingSID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SRTEBindingSID.Merge(m, src)
}
func (m *SRTEBindingSID) XXX_Size() int {
	return xxx_messageInfo_SRTEBindingSID.Size(m)
}
func (m *SRTEBindingSID) XXX_DiscardUnknown() {
	xxx_messageInfo_SRTEBindingSID.DiscardUnknown(m)
}

var xxx_messageInfo_SRTEBindingSID proto.InternalMessageInfo

func (m *SRTEBindingSID) GetBindingSrId() *SidEntry {
	if m != nil {
		return m.BindingSrId
	}
	return nil
}

//*
// SR-TE Address key fields
type SRTEAddress struct {
	//* Identifies endpoint of the policy, this is mandatory parameter
	Destination *jnx_addr.IpAddress `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`
	//*
	// value used to match destination prefix to the policy. All prefixes of a
	// particular color value is steered into policy that has the same color
	// value. This is a mandatory parameter.
	SrColor *SRTEColor `protobuf:"bytes,2,opt,name=sr_color,json=srColor,proto3" json:"sr_color,omitempty"`
	//*
	// Value that uniquely identifies the policy in the context of
	// <destination, color> tuple. SR policy originator can use this to make
	// policy unique in terms of BGP NLRI by setting different values for
	// multiple occurrences of same SR policy.
	// This is a mandatory parameter.
	SrDistinguisher      *SRTEDistinguisher `protobuf:"bytes,3,opt,name=sr_distinguisher,json=srDistinguisher,proto3" json:"sr_distinguisher,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *SRTEAddress) Reset()         { *m = SRTEAddress{} }
func (m *SRTEAddress) String() string { return proto.CompactTextString(m) }
func (*SRTEAddress) ProtoMessage()    {}
func (*SRTEAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a2b87256a7dae02, []int{19}
}

func (m *SRTEAddress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SRTEAddress.Unmarshal(m, b)
}
func (m *SRTEAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SRTEAddress.Marshal(b, m, deterministic)
}
func (m *SRTEAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SRTEAddress.Merge(m, src)
}
func (m *SRTEAddress) XXX_Size() int {
	return xxx_messageInfo_SRTEAddress.Size(m)
}
func (m *SRTEAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_SRTEAddress.DiscardUnknown(m)
}

var xxx_messageInfo_SRTEAddress proto.InternalMessageInfo

func (m *SRTEAddress) GetDestination() *jnx_addr.IpAddress {
	if m != nil {
		return m.Destination
	}
	return nil
}

func (m *SRTEAddress) GetSrColor() *SRTEColor {
	if m != nil {
		return m.SrColor
	}
	return nil
}

func (m *SRTEAddress) GetSrDistinguisher() *SRTEDistinguisher {
	if m != nil {
		return m.SrDistinguisher
	}
	return nil
}

//*
// SR-TE Route information like segments.
type SRTERouteData struct {
	//
	// Specifies the BSID of the path.
	// Optional parameter, there is no default value.
	BindingSid *SRTEBindingSID `protobuf:"bytes,1,opt,name=binding_sid,json=bindingSid,proto3" json:"binding_sid,omitempty"`
	Preference uint32          `protobuf:"varint,2,opt,name=preference,proto3" json:"preference,omitempty"`
	//
	// List of Explicit paths towards endpoint. REQUIRED parameter.
	// One or more segment lists to program.
	// Segment List entries. Mimimum one segment need to be set. A maximum of
	// 8 segment list are supported.
	SegmentLists         []*SRTESegmentList `protobuf:"bytes,3,rep,name=segment_lists,json=segmentLists,proto3" json:"segment_lists,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *SRTERouteData) Reset()         { *m = SRTERouteData{} }
func (m *SRTERouteData) String() string { return proto.CompactTextString(m) }
func (*SRTERouteData) ProtoMessage()    {}
func (*SRTERouteData) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a2b87256a7dae02, []int{20}
}

func (m *SRTERouteData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SRTERouteData.Unmarshal(m, b)
}
func (m *SRTERouteData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SRTERouteData.Marshal(b, m, deterministic)
}
func (m *SRTERouteData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SRTERouteData.Merge(m, src)
}
func (m *SRTERouteData) XXX_Size() int {
	return xxx_messageInfo_SRTERouteData.Size(m)
}
func (m *SRTERouteData) XXX_DiscardUnknown() {
	xxx_messageInfo_SRTERouteData.DiscardUnknown(m)
}

var xxx_messageInfo_SRTERouteData proto.InternalMessageInfo

func (m *SRTERouteData) GetBindingSid() *SRTEBindingSID {
	if m != nil {
		return m.BindingSid
	}
	return nil
}

func (m *SRTERouteData) GetPreference() uint32 {
	if m != nil {
		return m.Preference
	}
	return 0
}

func (m *SRTERouteData) GetSegmentLists() []*SRTESegmentList {
	if m != nil {
		return m.SegmentLists
	}
	return nil
}

//*
// Route data defined for each supported address family
type AddressFamilySpecificData struct {
	// Types that are valid to be assigned to RouteDataAf:
	//	*AddressFamilySpecificData_SrtePolicyData
	RouteDataAf          isAddressFamilySpecificData_RouteDataAf `protobuf_oneof:"RouteDataAf"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-"`
	XXX_unrecognized     []byte                                  `json:"-"`
	XXX_sizecache        int32                                   `json:"-"`
}

func (m *AddressFamilySpecificData) Reset()         { *m = AddressFamilySpecificData{} }
func (m *AddressFamilySpecificData) String() string { return proto.CompactTextString(m) }
func (*AddressFamilySpecificData) ProtoMessage()    {}
func (*AddressFamilySpecificData) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a2b87256a7dae02, []int{21}
}

func (m *AddressFamilySpecificData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddressFamilySpecificData.Unmarshal(m, b)
}
func (m *AddressFamilySpecificData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddressFamilySpecificData.Marshal(b, m, deterministic)
}
func (m *AddressFamilySpecificData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddressFamilySpecificData.Merge(m, src)
}
func (m *AddressFamilySpecificData) XXX_Size() int {
	return xxx_messageInfo_AddressFamilySpecificData.Size(m)
}
func (m *AddressFamilySpecificData) XXX_DiscardUnknown() {
	xxx_messageInfo_AddressFamilySpecificData.DiscardUnknown(m)
}

var xxx_messageInfo_AddressFamilySpecificData proto.InternalMessageInfo

type isAddressFamilySpecificData_RouteDataAf interface {
	isAddressFamilySpecificData_RouteDataAf()
}

type AddressFamilySpecificData_SrtePolicyData struct {
	SrtePolicyData *SRTERouteData `protobuf:"bytes,1,opt,name=srte_policy_data,json=srtePolicyData,proto3,oneof"`
}

func (*AddressFamilySpecificData_SrtePolicyData) isAddressFamilySpecificData_RouteDataAf() {}

func (m *AddressFamilySpecificData) GetRouteDataAf() isAddressFamilySpecificData_RouteDataAf {
	if m != nil {
		return m.RouteDataAf
	}
	return nil
}

func (m *AddressFamilySpecificData) GetSrtePolicyData() *SRTERouteData {
	if x, ok := m.GetRouteDataAf().(*AddressFamilySpecificData_SrtePolicyData); ok {
		return x.SrtePolicyData
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*AddressFamilySpecificData) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _AddressFamilySpecificData_OneofMarshaler, _AddressFamilySpecificData_OneofUnmarshaler, _AddressFamilySpecificData_OneofSizer, []interface{}{
		(*AddressFamilySpecificData_SrtePolicyData)(nil),
	}
}

func _AddressFamilySpecificData_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*AddressFamilySpecificData)
	// RouteDataAf
	switch x := m.RouteDataAf.(type) {
	case *AddressFamilySpecificData_SrtePolicyData:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SrtePolicyData); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AddressFamilySpecificData.RouteDataAf has unexpected type %T", x)
	}
	return nil
}

func _AddressFamilySpecificData_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*AddressFamilySpecificData)
	switch tag {
	case 1: // RouteDataAf.srte_policy_data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SRTERouteData)
		err := b.DecodeMessage(msg)
		m.RouteDataAf = &AddressFamilySpecificData_SrtePolicyData{msg}
		return true, err
	default:
		return false, nil
	}
}

func _AddressFamilySpecificData_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*AddressFamilySpecificData)
	// RouteDataAf
	switch x := m.RouteDataAf.(type) {
	case *AddressFamilySpecificData_SrtePolicyData:
		s := proto.Size(x.SrtePolicyData)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

//*
// Route destination prefix defined for each supported address family
type RoutePrefix struct {
	// Types that are valid to be assigned to RoutePrefixAf:
	//	*RoutePrefix_Inet
	//	*RoutePrefix_Inet6
	//	*RoutePrefix_Inetvpn
	//	*RoutePrefix_Inet6Vpn
	//	*RoutePrefix_LabeledInet
	//	*RoutePrefix_LabeledInet6
	//	*RoutePrefix_InetSrtePolicy
	//	*RoutePrefix_Inet6SrtePolicy
	RoutePrefixAf        isRoutePrefix_RoutePrefixAf `protobuf_oneof:"RoutePrefixAf"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *RoutePrefix) Reset()         { *m = RoutePrefix{} }
func (m *RoutePrefix) String() string { return proto.CompactTextString(m) }
func (*RoutePrefix) ProtoMessage()    {}
func (*RoutePrefix) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a2b87256a7dae02, []int{22}
}

func (m *RoutePrefix) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoutePrefix.Unmarshal(m, b)
}
func (m *RoutePrefix) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoutePrefix.Marshal(b, m, deterministic)
}
func (m *RoutePrefix) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoutePrefix.Merge(m, src)
}
func (m *RoutePrefix) XXX_Size() int {
	return xxx_messageInfo_RoutePrefix.Size(m)
}
func (m *RoutePrefix) XXX_DiscardUnknown() {
	xxx_messageInfo_RoutePrefix.DiscardUnknown(m)
}

var xxx_messageInfo_RoutePrefix proto.InternalMessageInfo

type isRoutePrefix_RoutePrefixAf interface {
	isRoutePrefix_RoutePrefixAf()
}

type RoutePrefix_Inet struct {
	Inet *jnx_addr.IpAddress `protobuf:"bytes,1,opt,name=inet,proto3,oneof"`
}

type RoutePrefix_Inet6 struct {
	Inet6 *jnx_addr.IpAddress `protobuf:"bytes,2,opt,name=inet6,proto3,oneof"`
}

type RoutePrefix_Inetvpn struct {
	Inetvpn *L3VpnAddress `protobuf:"bytes,3,opt,name=inetvpn,proto3,oneof"`
}

type RoutePrefix_Inet6Vpn struct {
	Inet6Vpn *L3VpnAddress `protobuf:"bytes,4,opt,name=inet6vpn,proto3,oneof"`
}

type RoutePrefix_LabeledInet struct {
	LabeledInet *jnx_addr.IpAddress `protobuf:"bytes,5,opt,name=labeled_inet,json=labeledInet,proto3,oneof"`
}

type RoutePrefix_LabeledInet6 struct {
	LabeledInet6 *jnx_addr.IpAddress `protobuf:"bytes,6,opt,name=labeled_inet6,json=labeledInet6,proto3,oneof"`
}

type RoutePrefix_InetSrtePolicy struct {
	InetSrtePolicy *SRTEAddress `protobuf:"bytes,7,opt,name=inet_srte_policy,json=inetSrtePolicy,proto3,oneof"`
}

type RoutePrefix_Inet6SrtePolicy struct {
	Inet6SrtePolicy *SRTEAddress `protobuf:"bytes,8,opt,name=inet6_srte_policy,json=inet6SrtePolicy,proto3,oneof"`
}

func (*RoutePrefix_Inet) isRoutePrefix_RoutePrefixAf() {}

func (*RoutePrefix_Inet6) isRoutePrefix_RoutePrefixAf() {}

func (*RoutePrefix_Inetvpn) isRoutePrefix_RoutePrefixAf() {}

func (*RoutePrefix_Inet6Vpn) isRoutePrefix_RoutePrefixAf() {}

func (*RoutePrefix_LabeledInet) isRoutePrefix_RoutePrefixAf() {}

func (*RoutePrefix_LabeledInet6) isRoutePrefix_RoutePrefixAf() {}

func (*RoutePrefix_InetSrtePolicy) isRoutePrefix_RoutePrefixAf() {}

func (*RoutePrefix_Inet6SrtePolicy) isRoutePrefix_RoutePrefixAf() {}

func (m *RoutePrefix) GetRoutePrefixAf() isRoutePrefix_RoutePrefixAf {
	if m != nil {
		return m.RoutePrefixAf
	}
	return nil
}

func (m *RoutePrefix) GetInet() *jnx_addr.IpAddress {
	if x, ok := m.GetRoutePrefixAf().(*RoutePrefix_Inet); ok {
		return x.Inet
	}
	return nil
}

func (m *RoutePrefix) GetInet6() *jnx_addr.IpAddress {
	if x, ok := m.GetRoutePrefixAf().(*RoutePrefix_Inet6); ok {
		return x.Inet6
	}
	return nil
}

func (m *RoutePrefix) GetInetvpn() *L3VpnAddress {
	if x, ok := m.GetRoutePrefixAf().(*RoutePrefix_Inetvpn); ok {
		return x.Inetvpn
	}
	return nil
}

func (m *RoutePrefix) GetInet6Vpn() *L3VpnAddress {
	if x, ok := m.GetRoutePrefixAf().(*RoutePrefix_Inet6Vpn); ok {
		return x.Inet6Vpn
	}
	return nil
}

func (m *RoutePrefix) GetLabeledInet() *jnx_addr.IpAddress {
	if x, ok := m.GetRoutePrefixAf().(*RoutePrefix_LabeledInet); ok {
		return x.LabeledInet
	}
	return nil
}

func (m *RoutePrefix) GetLabeledInet6() *jnx_addr.IpAddress {
	if x, ok := m.GetRoutePrefixAf().(*RoutePrefix_LabeledInet6); ok {
		return x.LabeledInet6
	}
	return nil
}

func (m *RoutePrefix) GetInetSrtePolicy() *SRTEAddress {
	if x, ok := m.GetRoutePrefixAf().(*RoutePrefix_InetSrtePolicy); ok {
		return x.InetSrtePolicy
	}
	return nil
}

func (m *RoutePrefix) GetInet6SrtePolicy() *SRTEAddress {
	if x, ok := m.GetRoutePrefixAf().(*RoutePrefix_Inet6SrtePolicy); ok {
		return x.Inet6SrtePolicy
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RoutePrefix) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RoutePrefix_OneofMarshaler, _RoutePrefix_OneofUnmarshaler, _RoutePrefix_OneofSizer, []interface{}{
		(*RoutePrefix_Inet)(nil),
		(*RoutePrefix_Inet6)(nil),
		(*RoutePrefix_Inetvpn)(nil),
		(*RoutePrefix_Inet6Vpn)(nil),
		(*RoutePrefix_LabeledInet)(nil),
		(*RoutePrefix_LabeledInet6)(nil),
		(*RoutePrefix_InetSrtePolicy)(nil),
		(*RoutePrefix_Inet6SrtePolicy)(nil),
	}
}

func _RoutePrefix_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RoutePrefix)
	// RoutePrefixAf
	switch x := m.RoutePrefixAf.(type) {
	case *RoutePrefix_Inet:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Inet); err != nil {
			return err
		}
	case *RoutePrefix_Inet6:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Inet6); err != nil {
			return err
		}
	case *RoutePrefix_Inetvpn:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Inetvpn); err != nil {
			return err
		}
	case *RoutePrefix_Inet6Vpn:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Inet6Vpn); err != nil {
			return err
		}
	case *RoutePrefix_LabeledInet:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LabeledInet); err != nil {
			return err
		}
	case *RoutePrefix_LabeledInet6:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LabeledInet6); err != nil {
			return err
		}
	case *RoutePrefix_InetSrtePolicy:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.InetSrtePolicy); err != nil {
			return err
		}
	case *RoutePrefix_Inet6SrtePolicy:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Inet6SrtePolicy); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RoutePrefix.RoutePrefixAf has unexpected type %T", x)
	}
	return nil
}

func _RoutePrefix_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RoutePrefix)
	switch tag {
	case 1: // RoutePrefixAf.inet
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(jnx_addr.IpAddress)
		err := b.DecodeMessage(msg)
		m.RoutePrefixAf = &RoutePrefix_Inet{msg}
		return true, err
	case 2: // RoutePrefixAf.inet6
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(jnx_addr.IpAddress)
		err := b.DecodeMessage(msg)
		m.RoutePrefixAf = &RoutePrefix_Inet6{msg}
		return true, err
	case 3: // RoutePrefixAf.inetvpn
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(L3VpnAddress)
		err := b.DecodeMessage(msg)
		m.RoutePrefixAf = &RoutePrefix_Inetvpn{msg}
		return true, err
	case 4: // RoutePrefixAf.inet6vpn
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(L3VpnAddress)
		err := b.DecodeMessage(msg)
		m.RoutePrefixAf = &RoutePrefix_Inet6Vpn{msg}
		return true, err
	case 5: // RoutePrefixAf.labeled_inet
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(jnx_addr.IpAddress)
		err := b.DecodeMessage(msg)
		m.RoutePrefixAf = &RoutePrefix_LabeledInet{msg}
		return true, err
	case 6: // RoutePrefixAf.labeled_inet6
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(jnx_addr.IpAddress)
		err := b.DecodeMessage(msg)
		m.RoutePrefixAf = &RoutePrefix_LabeledInet6{msg}
		return true, err
	case 7: // RoutePrefixAf.inet_srte_policy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SRTEAddress)
		err := b.DecodeMessage(msg)
		m.RoutePrefixAf = &RoutePrefix_InetSrtePolicy{msg}
		return true, err
	case 8: // RoutePrefixAf.inet6_srte_policy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SRTEAddress)
		err := b.DecodeMessage(msg)
		m.RoutePrefixAf = &RoutePrefix_Inet6SrtePolicy{msg}
		return true, err
	default:
		return false, nil
	}
}

func _RoutePrefix_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RoutePrefix)
	// RoutePrefixAf
	switch x := m.RoutePrefixAf.(type) {
	case *RoutePrefix_Inet:
		s := proto.Size(x.Inet)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RoutePrefix_Inet6:
		s := proto.Size(x.Inet6)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RoutePrefix_Inetvpn:
		s := proto.Size(x.Inetvpn)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RoutePrefix_Inet6Vpn:
		s := proto.Size(x.Inet6Vpn)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RoutePrefix_LabeledInet:
		s := proto.Size(x.LabeledInet)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RoutePrefix_LabeledInet6:
		s := proto.Size(x.LabeledInet6)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RoutePrefix_InetSrtePolicy:
		s := proto.Size(x.InetSrtePolicy)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RoutePrefix_Inet6SrtePolicy:
		s := proto.Size(x.Inet6SrtePolicy)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

//*
// Network Address defined for each supported address family
type NetworkAddress struct {
	// Types that are valid to be assigned to Af:
	//	*NetworkAddress_Inet
	//	*NetworkAddress_Inet6
	//	*NetworkAddress_Mpls
	Af                   isNetworkAddress_Af `protobuf_oneof:"Af"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *NetworkAddress) Reset()         { *m = NetworkAddress{} }
func (m *NetworkAddress) String() string { return proto.CompactTextString(m) }
func (*NetworkAddress) ProtoMessage()    {}
func (*NetworkAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a2b87256a7dae02, []int{23}
}

func (m *NetworkAddress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkAddress.Unmarshal(m, b)
}
func (m *NetworkAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkAddress.Marshal(b, m, deterministic)
}
func (m *NetworkAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkAddress.Merge(m, src)
}
func (m *NetworkAddress) XXX_Size() int {
	return xxx_messageInfo_NetworkAddress.Size(m)
}
func (m *NetworkAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkAddress.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkAddress proto.InternalMessageInfo

type isNetworkAddress_Af interface {
	isNetworkAddress_Af()
}

type NetworkAddress_Inet struct {
	Inet *jnx_addr.IpAddress `protobuf:"bytes,1,opt,name=inet,proto3,oneof"`
}

type NetworkAddress_Inet6 struct {
	Inet6 *jnx_addr.IpAddress `protobuf:"bytes,2,opt,name=inet6,proto3,oneof"`
}

type NetworkAddress_Mpls struct {
	Mpls *MplsAddress `protobuf:"bytes,3,opt,name=mpls,proto3,oneof"`
}

func (*NetworkAddress_Inet) isNetworkAddress_Af() {}

func (*NetworkAddress_Inet6) isNetworkAddress_Af() {}

func (*NetworkAddress_Mpls) isNetworkAddress_Af() {}

func (m *NetworkAddress) GetAf() isNetworkAddress_Af {
	if m != nil {
		return m.Af
	}
	return nil
}

func (m *NetworkAddress) GetInet() *jnx_addr.IpAddress {
	if x, ok := m.GetAf().(*NetworkAddress_Inet); ok {
		return x.Inet
	}
	return nil
}

func (m *NetworkAddress) GetInet6() *jnx_addr.IpAddress {
	if x, ok := m.GetAf().(*NetworkAddress_Inet6); ok {
		return x.Inet6
	}
	return nil
}

func (m *NetworkAddress) GetMpls() *MplsAddress {
	if x, ok := m.GetAf().(*NetworkAddress_Mpls); ok {
		return x.Mpls
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*NetworkAddress) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _NetworkAddress_OneofMarshaler, _NetworkAddress_OneofUnmarshaler, _NetworkAddress_OneofSizer, []interface{}{
		(*NetworkAddress_Inet)(nil),
		(*NetworkAddress_Inet6)(nil),
		(*NetworkAddress_Mpls)(nil),
	}
}

func _NetworkAddress_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*NetworkAddress)
	// Af
	switch x := m.Af.(type) {
	case *NetworkAddress_Inet:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Inet); err != nil {
			return err
		}
	case *NetworkAddress_Inet6:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Inet6); err != nil {
			return err
		}
	case *NetworkAddress_Mpls:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Mpls); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("NetworkAddress.Af has unexpected type %T", x)
	}
	return nil
}

func _NetworkAddress_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*NetworkAddress)
	switch tag {
	case 1: // Af.inet
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(jnx_addr.IpAddress)
		err := b.DecodeMessage(msg)
		m.Af = &NetworkAddress_Inet{msg}
		return true, err
	case 2: // Af.inet6
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(jnx_addr.IpAddress)
		err := b.DecodeMessage(msg)
		m.Af = &NetworkAddress_Inet6{msg}
		return true, err
	case 3: // Af.mpls
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MplsAddress)
		err := b.DecodeMessage(msg)
		m.Af = &NetworkAddress_Mpls{msg}
		return true, err
	default:
		return false, nil
	}
}

func _NetworkAddress_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*NetworkAddress)
	// Af
	switch x := m.Af.(type) {
	case *NetworkAddress_Inet:
		s := proto.Size(x.Inet)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NetworkAddress_Inet6:
		s := proto.Size(x.Inet6)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NetworkAddress_Mpls:
		s := proto.Size(x.Mpls)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterEnum("routing.ReturnCode", ReturnCode_name, ReturnCode_value)
	proto.RegisterEnum("routing.RouteTableFormat", RouteTableFormat_name, RouteTableFormat_value)
	proto.RegisterEnum("routing.RouteAfType", RouteAfType_name, RouteAfType_value)
	proto.RegisterEnum("routing.LabelOperation", LabelOperation_name, LabelOperation_value)
	proto.RegisterEnum("routing.RouteProtoType", RouteProtoType_name, RouteProtoType_value)
	proto.RegisterEnum("routing.LabelEntry_WellKnownLabels", LabelEntry_WellKnownLabels_name, LabelEntry_WellKnownLabels_value)
	proto.RegisterType((*RouteTableName)(nil), "routing.RouteTableName")
	proto.RegisterType((*RouteTableId)(nil), "routing.RouteTableId")
	proto.RegisterType((*RouteTable)(nil), "routing.RouteTable")
	proto.RegisterType((*RdType0)(nil), "routing.RdType0")
	proto.RegisterType((*RdType1)(nil), "routing.RdType1")
	proto.RegisterType((*RdType2)(nil), "routing.RdType2")
	proto.RegisterType((*RouteDistinguisher)(nil), "routing.RouteDistinguisher")
	proto.RegisterType((*L3VpnAddress)(nil), "routing.L3vpnAddress")
	proto.RegisterType((*LabelEntry)(nil), "routing.LabelEntry")
	proto.RegisterType((*LabelStackEntry)(nil), "routing.LabelStackEntry")
	proto.RegisterType((*MplsAddress)(nil), "routing.MplsAddress")
	proto.RegisterType((*LabelStack)(nil), "routing.LabelStack")
	proto.RegisterType((*SidEntry)(nil), "routing.SidEntry")
	proto.RegisterType((*SegmentType1)(nil), "routing.SegmentType1")
	proto.RegisterType((*SRTESegment)(nil), "routing.SRTESegment")
	proto.RegisterType((*SRTESegmentList)(nil), "routing.SRTESegmentList")
	proto.RegisterType((*SRTEDistinguisher)(nil), "routing.SRTEDistinguisher")
	proto.RegisterType((*SRTEColor)(nil), "routing.SRTEColor")
	proto.RegisterType((*SRTEBindingSID)(nil), "routing.SRTEBindingSID")
	proto.RegisterType((*SRTEAddress)(nil), "routing.SRTEAddress")
	proto.RegisterType((*SRTERouteData)(nil), "routing.SRTERouteData")
	proto.RegisterType((*AddressFamilySpecificData)(nil), "routing.AddressFamilySpecificData")
	proto.RegisterType((*RoutePrefix)(nil), "routing.RoutePrefix")
	proto.RegisterType((*NetworkAddress)(nil), "routing.NetworkAddress")
}

func init() { proto.RegisterFile("prpd_common.proto", fileDescriptor_9a2b87256a7dae02) }

var fileDescriptor_9a2b87256a7dae02 = []byte{
	// 1611 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0xdb, 0x6e, 0xe3, 0xc8,
	0x11, 0xd5, 0xcd, 0x92, 0x5c, 0xba, 0xb5, 0xdb, 0x5e, 0x5b, 0x3b, 0xb3, 0x59, 0x6c, 0xb8, 0x8b,
	0xc4, 0x70, 0x10, 0x67, 0x2c, 0x3b, 0xde, 0x2c, 0x92, 0x05, 0x96, 0x92, 0x68, 0x89, 0xb0, 0x2e,
	0x44, 0x93, 0xf6, 0x64, 0x90, 0x07, 0x82, 0x16, 0x29, 0x2f, 0x67, 0x25, 0x92, 0x20, 0xe9, 0x19,
	0xfb, 0x25, 0x40, 0x90, 0x3f, 0xc8, 0x53, 0x3e, 0x21, 0xbf, 0x90, 0xe7, 0xfc, 0xc3, 0x7c, 0x4f,
	0x50, 0xcd, 0x96, 0x48, 0x79, 0x3c, 0x46, 0x02, 0x24, 0x4f, 0xaa, 0xae, 0x3e, 0x75, 0xba, 0xea,
	0x54, 0x77, 0xb3, 0x05, 0x3b, 0x41, 0x18, 0xd8, 0xe6, 0xcc, 0x5f, 0x2e, 0x7d, 0xef, 0x38, 0x08,
	0xfd, 0xd8, 0xa7, 0x95, 0xd0, 0xbf, 0x8b, 0x5d, 0xef, 0xf6, 0x45, 0xf3, 0xad, 0x77, 0x6f, 0x5a,
	0xb6, 0x1d, 0x26, 0x13, 0xd2, 0x37, 0xd0, 0x64, 0xfe, 0x5d, 0xec, 0x18, 0xd6, 0xcd, 0xc2, 0x99,
	0x58, 0x4b, 0x87, 0x52, 0x28, 0x79, 0xd6, 0xd2, 0x69, 0xe7, 0xbf, 0xca, 0x1f, 0x6e, 0x33, 0x6e,
	0x4b, 0x5f, 0x42, 0x3d, 0x45, 0xa9, 0x36, 0x6d, 0x42, 0xc1, 0xb5, 0x39, 0xa2, 0xc1, 0x0a, 0xae,
	0x2d, 0xfd, 0x35, 0x0f, 0x90, 0x02, 0xe8, 0x31, 0x94, 0xc3, 0x38, 0x36, 0x05, 0xa4, 0xd6, 0xf9,
	0xec, 0x58, 0x2c, 0x7f, 0x9c, 0x65, 0x19, 0xe6, 0xd8, 0x56, 0x18, 0xc7, 0xaa, 0x4d, 0xcf, 0xa0,
	0x8a, 0x78, 0xbe, 0x6c, 0x81, 0x47, 0x1c, 0x3c, 0x11, 0x81, 0xd9, 0x0d, 0x73, 0xac, 0x12, 0xc6,
	0x31, 0x9a, 0xdd, 0x16, 0x34, 0x58, 0xcc, 0x67, 0x2e, 0xfc, 0x70, 0x69, 0xc5, 0xd2, 0x14, 0x2a,
	0xcc, 0x36, 0x1e, 0x02, 0xe7, 0x15, 0x7d, 0x09, 0xdb, 0x56, 0x64, 0x7a, 0x77, 0xcb, 0x1b, 0x27,
	0x14, 0x79, 0x56, 0xad, 0x68, 0xc2, 0xc7, 0xf4, 0x97, 0xd0, 0xb2, 0xa2, 0xc8, 0xbd, 0xf5, 0x1c,
	0x7b, 0x05, 0x29, 0x70, 0x48, 0x73, 0xe5, 0x4e, 0x80, 0x92, 0xb3, 0x22, 0x3c, 0xa1, 0x27, 0x00,
	0x6e, 0xc0, 0x85, 0x73, 0xa2, 0x48, 0x94, 0x45, 0x8f, 0xdf, 0x7a, 0xf7, 0x5d, 0x2b, 0x72, 0x8e,
	0xd5, 0x40, 0x4e, 0x66, 0xd8, 0xb6, 0xbb, 0x32, 0xff, 0xf3, 0x65, 0xd6, 0x79, 0x77, 0xfe, 0x47,
	0x79, 0xff, 0x2d, 0x0f, 0x94, 0xeb, 0xd6, 0x77, 0x23, 0x14, 0xf1, 0xce, 0x8d, 0x7e, 0x74, 0x42,
	0xfa, 0x0d, 0x14, 0x43, 0xfb, 0x95, 0x48, 0x9e, 0xa4, 0x0a, 0x27, 0x9a, 0x0d, 0x73, 0x0c, 0xa7,
	0x13, 0xd4, 0x89, 0xe8, 0xc3, 0x63, 0xd4, 0x49, 0x82, 0x3a, 0x49, 0x50, 0x9d, 0x76, 0xf1, 0x49,
	0x54, 0x27, 0x41, 0x75, 0xba, 0x00, 0x55, 0x66, 0x8b, 0xee, 0xbc, 0x85, 0xfa, 0xe8, 0xf4, 0x5d,
	0xe0, 0xad, 0xe4, 0xf9, 0x15, 0x14, 0xc2, 0xd5, 0x06, 0x79, 0xb9, 0xd9, 0xee, 0x8d, 0xb4, 0x59,
	0x21, 0xb4, 0xe9, 0xaf, 0xa1, 0xfa, 0x2e, 0xf0, 0xb8, 0xfe, 0x22, 0xb3, 0xa7, 0xc4, 0xaf, 0x08,
	0x7a, 0xe9, 0x2f, 0x05, 0x80, 0x91, 0x75, 0xe3, 0x2c, 0x14, 0x2f, 0x0e, 0x1f, 0xe8, 0x1e, 0x6c,
	0x2d, 0x70, 0x24, 0x14, 0x4d, 0x06, 0xf4, 0x6b, 0x68, 0xc4, 0xa1, 0x35, 0x9f, 0xbb, 0x33, 0x73,
	0xb6, 0xb0, 0xa2, 0x48, 0x88, 0x59, 0x17, 0xce, 0x1e, 0xfa, 0x28, 0x81, 0x62, 0x1c, 0x2f, 0x78,
	0x9d, 0x0d, 0x86, 0x26, 0xfd, 0x05, 0xb4, 0x6e, 0xfc, 0x38, 0xf6, 0x97, 0xa6, 0x3f, 0x37, 0xa3,
	0xd8, 0x9a, 0xfd, 0xd4, 0x2e, 0x7d, 0x95, 0x3f, 0xac, 0xb2, 0x46, 0xe2, 0x9e, 0xce, 0x75, 0x74,
	0x4a, 0x7f, 0x86, 0xd6, 0x6b, 0x67, 0xb1, 0xb8, 0xf4, 0xfc, 0xf7, 0x1e, 0xcf, 0x25, 0xa2, 0x5f,
	0x40, 0x5b, 0xd5, 0xae, 0xcf, 0x4c, 0xe5, 0x8f, 0xda, 0x48, 0xed, 0xa9, 0x86, 0x39, 0xb9, 0x1a,
	0x8d, 0xcc, 0x91, 0xdc, 0x55, 0x46, 0x24, 0x47, 0xf7, 0x81, 0xb2, 0xe9, 0x95, 0xa1, 0x30, 0x53,
	0x1e, 0x29, 0xcc, 0x10, 0xfe, 0xbc, 0x88, 0x3a, 0x7f, 0x32, 0xaa, 0x40, 0x0f, 0x60, 0x57, 0x1d,
	0x7f, 0x3c, 0x51, 0x94, 0xee, 0xa1, 0xc5, 0x97, 0xe5, 0xd9, 0x24, 0x3a, 0xfc, 0x06, 0xca, 0x7e,
	0x30, 0xf3, 0xed, 0xe4, 0x70, 0x37, 0x33, 0xa7, 0x8c, 0x23, 0xa7, 0x81, 0x13, 0x5a, 0xb1, 0xeb,
	0x7b, 0x4c, 0xc0, 0xe8, 0x19, 0xd4, 0xb8, 0x56, 0xa6, 0x83, 0xf1, 0x42, 0xf9, 0xdd, 0xcd, 0x28,
	0x4e, 0xcd, 0x60, 0xb1, 0xb6, 0xa5, 0xaf, 0xa1, 0x36, 0x0e, 0x16, 0xd1, 0xaa, 0xd1, 0x4f, 0xaa,
	0x2f, 0xfd, 0x20, 0x3a, 0xc4, 0xd3, 0xa3, 0x1d, 0xa8, 0xe0, 0x12, 0xae, 0x83, 0x67, 0xab, 0x78,
	0x58, 0xeb, 0xb4, 0x37, 0x17, 0x49, 0x8b, 0x60, 0x2b, 0xa0, 0xf4, 0x06, 0xaa, 0xba, 0x6b, 0x27,
	0x95, 0x7d, 0x0f, 0xad, 0xc8, 0xb5, 0xcd, 0x6c, 0xb2, 0xf9, 0x4f, 0x26, 0x3b, 0xcc, 0xb1, 0x46,
	0xe4, 0xda, 0xa9, 0xa3, 0xdb, 0x84, 0xfa, 0x8a, 0x0a, 0xf7, 0xaf, 0x74, 0x09, 0x75, 0xdd, 0xb9,
	0x5d, 0x3a, 0x5e, 0x9c, 0x9c, 0xfe, 0xdf, 0xff, 0x37, 0xf4, 0x8f, 0xc8, 0xa5, 0xd7, 0x50, 0xd3,
	0x99, 0xa1, 0x08, 0x42, 0xfa, 0x07, 0x68, 0x44, 0x89, 0x69, 0xc6, 0x48, 0xfe, 0xd1, 0x1d, 0x99,
	0x5d, 0x79, 0x98, 0x63, 0xf5, 0x28, 0x33, 0xc6, 0x13, 0x85, 0x64, 0x3c, 0xcb, 0x3f, 0x41, 0x2b,
	0x43, 0x3c, 0x72, 0xa3, 0x98, 0xee, 0x43, 0xf9, 0xbd, 0xe3, 0xde, 0xfe, 0x18, 0x0b, 0xb1, 0xc5,
	0x88, 0xbe, 0x82, 0xaa, 0xa0, 0xc1, 0x6d, 0x8e, 0x02, 0xef, 0xa5, 0xeb, 0xa5, 0x1c, 0x6c, 0x8d,
	0x92, 0xbe, 0x83, 0x1d, 0x9c, 0x78, 0x7c, 0x83, 0x34, 0xec, 0xac, 0x43, 0xac, 0xb2, 0xe9, 0x94,
	0x7e, 0x0e, 0xdb, 0x18, 0xda, 0xf3, 0x17, 0x7e, 0x88, 0xdd, 0x9f, 0xa1, 0xb1, 0xea, 0x3e, 0x1f,
	0x48, 0x03, 0x68, 0x22, 0xa4, 0xeb, 0x7a, 0xb6, 0xeb, 0xdd, 0xea, 0x6a, 0x9f, 0xfe, 0x16, 0x1a,
	0x37, 0xc9, 0xc8, 0x8c, 0xc2, 0xf4, 0xd3, 0xb1, 0x93, 0xa6, 0x29, 0x1a, 0xc4, 0x6a, 0x02, 0xa7,
	0x87, 0xaa, 0x2d, 0xfd, 0x33, 0x9f, 0xa8, 0xbb, 0xda, 0x6c, 0x67, 0x50, 0xb3, 0x1d, 0x4c, 0x86,
	0x6f, 0xe4, 0x67, 0x2e, 0xea, 0x2c, 0x0c, 0xaf, 0x97, 0x28, 0x34, 0x93, 0x3c, 0x57, 0xd7, 0x4b,
	0x56, 0x1e, 0x5e, 0x0a, 0xab, 0x44, 0x61, 0x52, 0x93, 0x02, 0x24, 0x0a, 0xcd, 0x4d, 0x25, 0x92,
	0x9b, 0xf0, 0xc5, 0x46, 0xd8, 0xe6, 0x3d, 0xd6, 0x8a, 0xc2, 0x0d, 0x87, 0xf4, 0x8f, 0x3c, 0x34,
	0x10, 0x96, 0xdc, 0x79, 0x56, 0x6c, 0xd1, 0xdf, 0x41, 0x6d, 0x2d, 0xc2, 0x5a, 0x82, 0x83, 0x0d,
	0xce, 0x54, 0x32, 0x06, 0x2b, 0x21, 0x5c, 0x9b, 0x7e, 0x09, 0x10, 0x84, 0xce, 0xdc, 0x09, 0x1d,
	0x6f, 0xe6, 0x88, 0x9b, 0x2c, 0xe3, 0xa1, 0xdf, 0xa7, 0xbb, 0x6e, 0xe1, 0x46, 0x71, 0xd4, 0x2e,
	0x3e, 0x3a, 0x66, 0x8f, 0x76, 0xd2, 0x7a, 0xdb, 0xe1, 0x20, 0x92, 0x3c, 0xf8, 0x5c, 0x08, 0x77,
	0x61, 0x2d, 0xdd, 0xc5, 0x83, 0x1e, 0x38, 0x33, 0x77, 0xee, 0xce, 0x78, 0xd6, 0x5d, 0x94, 0x23,
	0x76, 0xcc, 0xc0, 0x5f, 0xb8, 0xb3, 0x07, 0xd3, 0xb6, 0x62, 0x4b, 0xa4, 0xbe, 0xbf, 0x41, 0xbf,
	0xae, 0x73, 0x98, 0x63, 0x4d, 0x8c, 0xd0, 0x78, 0x00, 0x7a, 0xba, 0x0d, 0xa8, 0xad, 0xa7, 0xe5,
	0xb9, 0xf4, 0xa1, 0x28, 0xc6, 0x5a, 0xe8, 0xcc, 0xdd, 0x7b, 0x7a, 0x08, 0x25, 0xd7, 0x73, 0xe2,
	0x4f, 0xf7, 0x73, 0x98, 0x63, 0x1c, 0x41, 0x8f, 0x60, 0x0b, 0x7f, 0xcf, 0x3f, 0xfd, 0x99, 0xc0,
	0x77, 0x07, 0x87, 0xd0, 0x13, 0xa8, 0xa0, 0xf1, 0x2e, 0xf0, 0x44, 0xfb, 0xd2, 0x43, 0x98, 0xfd,
	0x54, 0xe1, 0xa3, 0x43, 0xe0, 0xe8, 0x29, 0x54, 0x79, 0x2c, 0xc6, 0x94, 0x9e, 0x8f, 0x59, 0x03,
	0xe9, 0xb7, 0x50, 0xe7, 0x57, 0x87, 0x63, 0x9b, 0xbc, 0x8a, 0xad, 0x67, 0x52, 0xab, 0x09, 0xa4,
	0x8a, 0xc5, 0x7c, 0x07, 0x8d, 0x6c, 0xe0, 0x79, 0xbb, 0xfc, 0x4c, 0x64, 0x3d, 0x13, 0x79, 0x4e,
	0x7f, 0x00, 0x82, 0x21, 0x66, 0xa6, 0x33, 0xed, 0x0a, 0x8f, 0xde, 0x3c, 0xf9, 0x69, 0x7c, 0x13,
	0xf1, 0xfa, 0xba, 0x2d, 0xb4, 0x0b, 0x3b, 0x7c, 0xd1, 0x0d, 0x8a, 0xea, 0xb3, 0x14, 0x2d, 0x1e,
	0x90, 0x72, 0xf0, 0x37, 0x5a, 0xda, 0x46, 0x79, 0x2e, 0xfd, 0x3d, 0x0f, 0xcd, 0x89, 0x13, 0xbf,
	0xf7, 0xc3, 0x9f, 0x56, 0x47, 0xf6, 0xff, 0xd3, 0xdb, 0x23, 0x28, 0x2d, 0x83, 0x45, 0x24, 0x1a,
	0x9b, 0x26, 0x9c, 0xf9, 0x32, 0x21, 0x2f, 0x62, 0xba, 0x25, 0x28, 0xc8, 0xf3, 0xa3, 0x37, 0x00,
	0xcc, 0x89, 0xef, 0x42, 0xaf, 0x87, 0x9f, 0xbe, 0x16, 0xd4, 0x98, 0x62, 0x98, 0xfa, 0x55, 0xaf,
	0xa7, 0xe8, 0x3a, 0xc9, 0xad, 0x1c, 0x17, 0xb2, 0x3a, 0xba, 0x62, 0x0a, 0xc9, 0xd3, 0x1d, 0x68,
	0xa0, 0x63, 0x32, 0x35, 0xcc, 0x8b, 0xe9, 0xd5, 0xa4, 0x4f, 0x0a, 0xfc, 0x13, 0xae, 0x18, 0xa6,
	0x3a, 0xb9, 0x96, 0x47, 0x6a, 0xdf, 0xd4, 0x64, 0x26, 0x8f, 0x75, 0x52, 0x3c, 0xea, 0x00, 0x49,
	0xdf, 0xb1, 0xc9, 0x7b, 0x88, 0x12, 0xa8, 0x1b, 0x72, 0x77, 0xa4, 0x98, 0xba, 0xc1, 0xd4, 0xc9,
	0x80, 0xe4, 0x68, 0x1d, 0xaa, 0x89, 0x47, 0xed, 0x93, 0xfc, 0xd1, 0xbf, 0xf2, 0xe2, 0x08, 0xc8,
	0x73, 0xbc, 0xed, 0x11, 0xcf, 0x0c, 0x53, 0xbe, 0x30, 0xaf, 0x26, 0xba, 0xa6, 0xf4, 0x48, 0x8e,
	0x36, 0x01, 0x12, 0x8f, 0x3a, 0x51, 0x0c, 0x92, 0xe7, 0x19, 0xae, 0xc7, 0xe7, 0xa4, 0xc0, 0x33,
	0x5c, 0x3b, 0xae, 0xb5, 0x09, 0x29, 0x52, 0x0a, 0xcd, 0x0c, 0x06, 0x7d, 0x25, 0x9e, 0x35, 0xf7,
	0xf1, 0xa7, 0x83, 0xd2, 0x4f, 0xf8, 0xb6, 0xf0, 0x69, 0xf1, 0xb1, 0xff, 0x9c, 0x94, 0xe9, 0x2e,
	0xb4, 0x52, 0x12, 0x13, 0xb7, 0x00, 0xa9, 0xd0, 0x3d, 0x20, 0x19, 0xe6, 0xc4, 0x5b, 0x3d, 0xfa,
	0x16, 0x9a, 0x9b, 0x6f, 0x0b, 0x5a, 0x85, 0xd2, 0x64, 0x3a, 0xd5, 0x48, 0x8e, 0x56, 0xa0, 0xa8,
	0x4d, 0x35, 0x92, 0x47, 0x97, 0x76, 0xa5, 0x0f, 0x49, 0x01, 0x2d, 0xfd, 0xb5, 0xac, 0x91, 0xe2,
	0xd1, 0x87, 0x82, 0xf8, 0x67, 0xa2, 0xe1, 0xff, 0x14, 0xae, 0x40, 0x05, 0x8a, 0xf2, 0xe4, 0x0d,
	0xc9, 0x51, 0x80, 0x72, 0x5f, 0x65, 0x4a, 0x0f, 0x8b, 0xde, 0x86, 0xad, 0xd1, 0xb4, 0x27, 0xe3,
	0x53, 0x08, 0xa0, 0x7c, 0xa9, 0xb0, 0x09, 0xbe, 0x7e, 0x50, 0x4b, 0xa6, 0x08, 0x50, 0x09, 0x69,
	0xa7, 0xba, 0x76, 0x41, 0xb6, 0x10, 0x8e, 0xd6, 0x29, 0x29, 0x23, 0x04, 0x4d, 0x13, 0x39, 0x2b,
	0x48, 0xce, 0x54, 0x8d, 0x54, 0x11, 0xc1, 0x54, 0x6d, 0x32, 0x20, 0xdb, 0xe8, 0xeb, 0x0e, 0x34,
	0x02, 0xc8, 0xac, 0x1b, 0xb2, 0xa1, 0xf6, 0x48, 0x0d, 0xb9, 0x54, 0x5d, 0xd5, 0x49, 0x9d, 0x5b,
	0x83, 0xb1, 0x46, 0x1a, 0xb4, 0x01, 0xdb, 0xf2, 0x60, 0xc0, 0x94, 0x81, 0x6c, 0x28, 0xa4, 0x89,
	0x14, 0xfd, 0xeb, 0x31, 0xd3, 0x48, 0x8b, 0xd7, 0xa8, 0x8e, 0x09, 0x41, 0xf0, 0x58, 0xef, 0x6b,
	0x64, 0x87, 0x5b, 0xda, 0x48, 0x27, 0x14, 0x2d, 0xa6, 0x5f, 0x6b, 0x64, 0x17, 0x61, 0xbd, 0x5e,
	0x8f, 0xec, 0xa1, 0x31, 0xea, 0x6b, 0xe4, 0x33, 0x34, 0xb0, 0x3b, 0xfb, 0x1c, 0x8e, 0xd6, 0x01,
	0xd2, 0x8e, 0x7b, 0xb2, 0x6e, 0x90, 0x36, 0xaf, 0xba, 0x83, 0xde, 0xcf, 0x13, 0xb3, 0x77, 0x69,
	0x90, 0x17, 0xb8, 0x21, 0xba, 0x03, 0xcd, 0x14, 0xa9, 0xbe, 0xe4, 0xfc, 0xea, 0x85, 0x41, 0xbe,
	0xe0, 0x65, 0x1b, 0x43, 0x85, 0x91, 0x9f, 0xdd, 0x94, 0xf9, 0x1f, 0xbf, 0xd3, 0x7f, 0x07, 0x00,
	0x00, 0xff, 0xff, 0x30, 0x97, 0x50, 0xa7, 0x26, 0x0e, 0x00, 0x00,
}
